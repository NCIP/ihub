<?xml version="1.0" encoding="utf-8" ?>
<!-- bda-build-template version 1.0.1 -->
<!--
$Id: install.xml 1679 2009-05-21 18:14:55Z saksass $
$HeadURL: https://gforge.nci.nih.gov/svnroot/automation/trunk/software/bda-build-template/software/build/install.xml $
-->

<project name="caxchange-installer" default="install" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	<description>
		This build file is part of the bda-build-templates project. This is the master install file for the project.  It should be placed in project/software.  This script is copied into the distribution and  executed from the extracted distribution.  It is run by typing "ant" from the master project build.xml or from command line. This script has two flows install and upgrade.
		Install will do the following
 			* Install binaries
			* Configure binaries
			* Install application
			* Configure application
			* Re-create database
			* Upgrade database
		Upgrade will do the following
			* Install applicationtools.dist.relative.dir
		The script includes target that may not be used by all projects, but are included in here becaue it is a template. This script has targets to deal with the following, you can delete targets you don't want to work with
		Application servers (option for grid services also)
			* Tomcat
			* Mirth
			* ActiveMQ
		Databases
			* MySQL
			* PostgreSQL
			* Oracle
		This script requires java and ant to run. Every thing else it needs is included in the distribution.
	</description>

	<!-- Properties file related properties and tasks -->
	<property environment="env" />
	<property file="local.properties" />
	<property file="project.properties" />
	<!-- load the properties file -->
	<property name="properties.file" value="${basedir}/install.properties" />
	<echo message="Using properties file of ${properties.file}." />
	<available file="${properties.file}" property="properties.file.exists" />
	<fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail." />
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2" />
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2" />
	<property file="${properties.file}" />

	<!-- Generic properties -->
	<property name="project.name" value="caXchange" />
	<property name="env.name" value="local" />
	<property name="log.dir" location="${basedir}/logs" />
	<property name="working.dir" location="${basedir}/working" />
	<property name="temp.dir" location="${working.dir}/temp" />


	<!-- Install Time properties -->
	<!-- Source and target directories -->
	<property name="bda-utils.dir" location="${basedir}/bda-utils" />
	<property name="tools.dir" location="${basedir}/${tools.dist.relative.dir}" />
	<property name="common.dir.src" location="${basedir}/${common.dist.relative.dir}" />
	<property name="common.dir.dest" location="${working.dir}/${common.dist.relative.dir}" />
	<property name="common.resource.dir.src" location="${common.dir.src}/resources" />
	<property name="common.resource.dir.dest" location="${common.dir.dest}/resources" />
	<property name="common.dir.dest.gme" location="${common.resource.dir.dest}/gmeScripts" />
	<property name="db.root.dir.src" location="${basedir}/${db.root.dist.relative.dir}" />
	<property name="db.caxchange.dir.src" location="${basedir}/${db.caxchange.dist.relative.dir}" />
	<property name="db.csm.dir.src" location="${basedir}/${db.csm.dist.relative.dir}" />
	<property name="db.llt.dir.src" location="${basedir}/${db.llt.dist.relative.dir}" />
	<property name="db.root.dir.dest" location="${working.dir}/${db.root.dist.relative.dir}" />
	<property name="db.caxchange.dir.dest" location="${working.dir}/${db.caxchange.dist.relative.dir}" />
	<property name="db.csm.dir.dest" location="${working.dir}/${db.csm.dist.relative.dir}" />
	<property name="db.llt.dir.dest" location="${working.dir}/${db.llt.dist.relative.dir}" />
	<property name="db.caxchange-install.dir.dest" location="${working.dir}/${db.caxchange-install.dist.relative.dir}" />
	<property name="db.csm-install.dir.dest" location="${working.dir}/${db.csm-install.dist.relative.dir}" />
	<property name="db.llt-install.dir.dest" location="${working.dir}/${db.llt-install.dist.relative.dir}" />
	<property name="db.caxchange-upgrade.dir.dest" location="${working.dir}/${db.caxchange-upgrade.dist.relative.dir}" />
	<property name="db.csm-upgrade.dir.dest" location="${working.dir}/${db.csm-upgrade.dist.relative.dir}" />
	<property name="db.llt-upgrade.dir.dest" location="${working.dir}/${db.llt-upgrade.dist.relative.dir}" />

	<!-- *-ds.xml and WAR -->
	<property name="caXchangeInboundService.dir.dist" location="${basedir}/${caXchangeInboundService.dist.relative.dir}" />
	<property name="caXchangeInboundService.ds.file" value="caxchange-ds.xml" />
	<property name="caXchangeInboundService.name" value="${caXchange.wsrf.war.name}" />
	<property name="caXchangeInboundService.war.file" value="${caXchangeInboundService.name}.war" />
	<property name="application.url" value="https://${amq.caxchange.host}:${tomcat.port.ssl}/${caXchange.wsrf.war.name}/services/cagrid/CaXchangeRequestProcessor" />
	
	<property name="openclinicaConsumerService.dir.dist" location="${basedir}/${OpenClinicaConsumerService.dist.relative.dir}" />
	<property name="openclinicaConsumerService.name" value="${openclinica.consumer.wsrf.war.name}" />
	<property name="openclinicaConsumerService.war.file" value="${openclinicaConsumerService.name}.war" />	

	<!-- mirth-components and assemblies -->
	<property name="mirth-components.dir.dist" location="${basedir}/${mirth-components.dist.relative.dir}" />
		
	<!-- Grid related properties -->
	<property name="grid.resource.dir" location="${basedir}/${tools.dist.relative.dir}" />
	<property name="grid.dir.dest" value="${caXchange.wsrf.war.name}" />
	<property name="grid.application.name" value="CaXchangeRequestProcessor" />
	<property name="resource.file.globus-lib" value="${cagrid-libs.binaries.file}" />
	<property name="resource.file.globus-war" value="${cagrid-base-war.binaries.file}" />
	<basename property="host.cert.file.name" file="${tomcat.grid.secure.cert.location}" />
	<basename property="host.key.file.name" file="${tomcat.grid.secure.key.location}" />

	<!-- Paths -->
	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- Task definitions -->
	<taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml" classpathref="bda-utils.classpath" />
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="bda-utils.classpath" />
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="bda-utils.classpath" />
	<taskdef resource="liquibasetasks.properties" classpathref="bda-utils.classpath" />
	<taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="bda-utils.classpath" />

	<!-- Includes-->
	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

	<!-- Clean/make working dir -->
	<delete dir="${working.dir}" failonerror="false" />
	<mkdir dir="${working.dir}" />

	<!-- Start logging moved out of target so all targets are logged -->
	<!--<property name="install-logs.dir" location="${application.base.path}/change-logs"/> -->
	<property name="install-logs.dir" location="${log.dir}" />
	<mkdir dir="${install-logs.dir}" />
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${install-logs.dir}/install-${install.time}.log" action="start" />

	<!-- Targets begin -->
	<target name="init:common">
		<!-- Conditionals -->
		<!-- iHub uses MySQL as its database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
		<!-- iHub adds the support for the postgres database -->
		<echoproperties prefix="database" />

		<!-- Initialize csm properties to application db properties if they are not set from the suite installer -->
		<property name="database.csm.host" value="${database.host}" />
		<property name="database.csm.port" value="${database.port}" />
		<property name="database.csm.name" value="${database.name}" />
		<property name="database.csm.username" value="${database.username}" />
		<property name="database.csm.password" value="${database.password}" />
		<property name="database.csm.type" value="${database.type}" />
		<property name="database.csm.drop-schema" value="${database.drop-schema}" />
		<property name="database.csm.re-create" value="${database.re-create}" />
		
		<if>
		<equals arg1="${suite.mode}" arg2="true" />
			<then>
				<var name="suite.gridsvc.host" unset="true" />
				<var name="suite.gridsvc.port" unset="true" />
				<property name="suite.gridsvc.host" value="${tomcat.hostname}" />
				<property name="suite.gridsvc.port" value="${tomcat.grid.secure.port}" />
			</then>
	        </if>
		
		<switch value="${database.type}">
			<case value="mysql">
				<property name="database.dialect" value="org.hibernate.dialect.MySQLDialect" />
				<property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.8.jar" />
				<property name="db.install.create.file.list" value="${db.caxchange.install.create.mysql.file.list}"/>
				<property name="db.csm.install.create.file.list" value="${db.csm.install.create.mysql.file.list}" />
				<property name="database.driver" value="com.mysql.jdbc.Driver" />
				<property name="sql.delimiter" value=";" />
				<property name="database.schema" value="${database.name}" />
				<property name="database.url" value="jdbc:${database.type}://${database.host}:${database.port}/${database.name}" />
				<property name="database.csm.url" value="jdbc:${database.csm.type}://${database.csm.host}:${database.csm.port}/${database.csm.name}"/>
			</case>
			<case value="postgresql">
				<property name="database.dialect" value="org.hibernate.dialect.PostgreSQLDialect" />
				<property name="database.driver.file" value="${bda-utils.dir}/postgresql-jdbc3-8.4-701.jar" />
				<property name="database.driver" value="org.postgresql.Driver" />
				<property name="db.install.create.file.list" value="${db.caxchange.install.create.postgresql.file.list}"/>
				<property name="db.csm.install.create.file.list" value="${db.csm.install.create.postgresql.file.list}"/>
				<property name="database.schema" value="public" />
				<property name="sql.delimiter" value="/" />
				<property name="database.url" value="jdbc:${database.type}://${database.host}:${database.port}/${database.name}" />
				<property name="database.csm.url" value="jdbc:${database.csm.type}://${database.csm.host}:${database.csm.port}/${database.csm.name}"/>
			</case>	
			<case value="oracle">
				<property name="database.dialect" value="org.hibernate.dialect.OracleDialect" />
				<property name="database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.4.0.jar" />
				<property name="database.driver" value="oracle.jdbc.driver.OracleDriver" />
                <property name="db.install.create.file.list" value="${db.caxchange.install.create.oracle.file.list}"/>
				<property name="db.csm.install.create.file.list" value="${db.csm.install.create.oracle.file.list}"/>				
				<property name="database.schema" value="${database.name}" />
				<property name="sql.delimiter" value="/" />
				<property name="database.url" value="jdbc:${database.type}:thin://${database.host}:${database.port}/${database.name}" />
				<property name="database.csm.url" value="jdbc:${database.csm.type}:thin://${database.csm.host}:${database.csm.port}/${database.csm.name}"/>
			</case>				
			<default>
				<fail message="Invalid database type ${database.type}" />
			</default>
		</switch>
		
                
        <property name="database.csm.driver" value="${database.driver}" />		
		<property name="database.llt.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.8.jar" />
		<property name="database.llt.driver" value="com.mysql.jdbc.Driver"/>
		<property name="database.llt.type" value="mysql" />

		<path id="jdbc.driver.classpath">
			<pathelement location="${database.driver.file}" />
			<pathelement location="${database.llt.driver.file}" />
		</path>

		<property name="properties.template.file" value="${basedir}/properties.template" />

		<filterset id="embedded.filterset">
			<filter token="application.base.path" value="${application.base.path}" />
			<filter token="application.url" value="${application.url}" />
			<filter token="gme.cache.directory" value="${mirth.home}/conf/${gme.cache.directory.name}" />
			<filter token="delegation.certificate.file.path" value="${mirth.home}/conf/${host.cert.file.name}" />
			<filter token="delegation.key.file.path" value="${mirth.home}/conf/${host.key.file.name}" />
			<filter token="caaers.adeers.key.store.path" value="${mirth.home}/conf/${caaers.adeers.key.store.name}" />

			<!-- properties added to handle sensitive properties per system's team -->
			<filter token="database.system.password" value="${database.system.password}" />
			<filter token="database.password" value="${database.password}" />
			<filter token="database.llt.password" value="${database.llt.password}" />
			<filter token="database.gme.password" value="${database.gme.password}" />
			<filter token="tomcat.ssl.keystore.pass" value="${tomcat.ssl.keystore.pass}" />
			<filter token="ccts_grid_test_password" value="${ccts_grid_test_password}" />
			<filter token="amq.caxchange.password" value="${amq.caxchange.password}" />
			<filter token="httpbc.caxchange.password" value="${httpbc.caxchange.password}" />
			<filter token="clinicalconnector.registration.password" value="${clinicalconnector.registration.password}" />
			<filter token="clinicalconnector.datacapture.password" value="${clinicalconnector.datacapture.password}" />
			<filter token="coppa.authentication.password" value="${coppa.authentication.password}"/>
			<filter token="suite.gridsvc.host" value="${suite.gridsvc.host}" />
			<filter token="suite.gridsvc.port" value="${suite.gridsvc.port}" />			

			<!--<filter token="database.url" value="${database.url}" />
			<filter token="database.user" value="${database.user}" />
			<filter token="database.password" value="${database.password}" />
			<filter token="database.system.url" value="${database.system.url}" /> -->
			
			<filter token="database.password" value="${database.password}" />
			<filter token="database.url" value="${database.url}" />
			<filter token="database.driver" value="${database.driver}" />
			<filter token="database.csm.url" value="${database.csm.url}" />
		    <filter token="database.csm.host" value="${database.csm.host}" />
		    <filter token="database.csm.port" value="${database.csm.port}" />
			<filter token="database.csm.name" value="${database.csm.name}" />
			<filter token="database.csm.username" value="${database.csm.username}" />
			<filter token="database.csm.password" value="${database.csm.password}" />
			<filter token="database.csm.url" value="${database.csm.url}" />
			<filter token="database.csm.type" value="${database.csm.type}" />
			<filter token="database.csm.drop-schema" value="${database.csm.drop-schema}" />
			<filter token="database.csm.re-create" value="${database.csm.re-create}" />
		    <filter token="database.csm.driver" value="${database.csm.driver}" />						
			<filter token="" value="" />
		</filterset>

		<!-- Added to convert location to file and path -->
		<basename file="${tomcat.ssl.keystore.location}" property="tomcat.ssl.keystore.file" />
		<dirname file="${tomcat.ssl.keystore.location}" property="tomcat.ssl.keystore.dir" />
		<basename file="${tomcat.grid.secure.cert.location}" property="tomcat.grid.secure.cert.file" />
		<dirname file="${tomcat.grid.secure.cert.location}" property="tomcat.grid.secure.dir" />
		<basename file="${tomcat.grid.secure.key.location}" property="tomcat.grid.secure.key.file" />
		<!--OS Temp dir -->
		<condition property="os.temp.dir" value="/tmp/${project.name}">
			<or>
				<os family="unix" />
				<os family="mac" />
			</or>
		</condition>

		<condition property="os.temp.dir" value="c:/temp/${project.name}">
			<os family="windows" />
		</condition>

	</target>

	<target name="diag">
		<echoproperties />
	</target>

	<target name="install:clean" description="Removes all files from the local filesystem" depends="
		init:install,
 		init:common,
 		install:clean:tomcat,
		install:clean:mirth,
		install:clean:activemq
		">
	</target>

	<target name="install:clean:tomcat" unless="exclude.tomcat" depends="init:install,init:common">
		<sleep seconds="5" />
		<property name="backup.count" value="5" />
		<if>
			<not>
				<equals arg1="${exclude.tomcat.backup}" arg2="true" />
			</not>
			<then>
				<property name="backup.tomcat.base.dir" location="${application.base.path}/backup/tomcat" />

				<backup-dir src.dir="${tomcat.home}" backup.base.dir="${backup.tomcat.base.dir}" backup.count="${backup.count}" />
			</then>
		</if>
		<delete dir="${tomcat.home}" />
	</target>

	<target name="install:clean:mirth" unless="exclude.mirth" depends="init:install,init:common">
		<sleep seconds="5" />
		<property name="backup.count" value="5" />
		<if>
			<not>
				<equals arg1="${exclude.mirth.backup}" arg2="true" />
			</not>
			<then>
				<property name="backup.mirth.base.dir" location="${application.base.path}/backup/mirth" />

				<backup-dir src.dir="${mirth.home}" backup.base.dir="${backup.mirth.base.dir}" backup.count="${backup.count}" />
			</then>
		</if>
		<delete dir="${mirth.home}" />
	</target>
	
	<target name="install:clean:activemq" unless="exclude.activemq" depends="init:install,init:common">
		<delete dir="${activemq.home}" />
		<sleep seconds="5" />
	</target>

	<target name="install:init" description="Does directory management to initialize install" depends="init:install,init:common">
		<!-- Default to false, properties can override -->
		<property name="tomcat.ssl.enable" value="false" />
		<!-- Copy files to ensure values containing variables are expanded, such properties are stored in embedded.filterset and then copy with filter files -->
		<copy todir="${common.dir.dest}" filtering="true">
			<fileset dir="${common.dir.src}">
				<include name="**/*" />
			</fileset>
			<filterset refid="embedded.filterset" />
			<filterset>
				<filtersfile file="${properties.file}" />
				<filtersfile file="project.properties" />
			</filterset>
		</copy>
	</target>

	<target name="install:database:prep" description="Copies db files with filtering" unless="exclude.database" depends="init:install,init:common">
		<property name="db.prop.list" value="database.url,database.username,database.password,database.name,database.llt.url,database.llt.username,database.llt.password,database.llt.name" />
		<echo message="Checking if database properties exist: ${db.prop.list}" />
		<properties-exist properties.list="${db.prop.list}" />
		<echoproperties prefix="database" />
		<copy todir="${db.root.dir.dest}" filtering="true">
			<fileset dir="${db.root.dir.src}">
				<include name="**/*" />
			</fileset>
			<filterset refid="embedded.filterset" />
			<filterset>
				<filtersfile file="${properties.file}" />
				<filtersfile file="project.properties" />
			</filterset>
		</copy>		
	</target>

	<target name="install:database" description="Runs database creation scripts then calls uprade database." unless="exclude.database" depends="
		init:install,
		init:common,
		install:database:prep
		">
		        <echo message="${database.url}" />
			<database-clean database.schema="${database.schema}" database.url="${database.url}" database.user="${database.username}" database.password="${database.password}" database.name="${database.name}" database.server="${database.host}" />
	                <database-install database.url="${database.url}" database.user="${database.username}" database.password="${database.password}" db.install.create.file.list="${db.install.create.file.list}" db-install.dir="${db.caxchange-install.dir.dest}"  sql.delimiter="${sql.delimiter}" sql.delimitertype="row"  />
			<database-upgrade database.url="${database.url}" database.user="${database.username}" database.password="${database.password}" database.schema="${database.schema}" database.changelog.file="${db.caxchange-upgrade.dir.dest}/db-upgrade.xml" />
			<database-tag database.url="${database.url}" database.user="${database.username}" database.password="${database.password}" database.schema="${database.schema}" />
			<if>
			<equals arg1="${llt.deploy}" arg2="true" />
				<then>
				<if>
				<equals arg1="${suite.mode}" arg2="false" />
				        <then>
				        <!-- CSM Database -->
				        <database-install database.url="${database.url}" database.user="${database.username}" database.password="${database.password}" db.install.create.file.list="${db.csm.install.create.file.list}" db-install.dir="${db.csm-install.dir.dest}"  sql.delimiter="${sql.delimiter}" sql.delimitertype="row"  />
				        <database-upgrade database.url="${database.url}" database.user="${database.username}" database.password="${database.password}" database.schema="${database.schema}" database.changelog.file="${db.csm-upgrade.dir.dest}/db-upgrade.xml" />
				        </then>
				</if>
				<!-- LLT Database -->
				<database-clean database.schema="${database.llt.name}" database.url="${database.llt.url}" database.user="${database.llt.username}" database.password="${database.llt.password}" database.name="${database.llt.name}" database.server="${database.llt.host}" database.driver.file="${database.llt.driver.file}" database.driver="${database.llt.driver}" database.drop-schema="${database.llt.drop-schema}" database.re-create="${database.llt.re-create}" database.type="${database.llt.type}"/>
				<database-install database.url="${database.llt.url}" database.user="${database.llt.username}" database.password="${database.llt.password}" db.install.create.file.list="${db.llt.install.create.mysql.file.list}" db-install.dir="${db.llt-install.dir.dest}"  database.type="${database.llt.type}" database.driver.file="${database.llt.driver.file}" database.driver="${database.llt.driver}"/>
				<database-upgrade database.url="${database.llt.url}" database.user="${database.llt.username}" database.password="${database.llt.password}" database.schema="${database.llt.name}" database.changelog.file="${db.llt-upgrade.dir.dest}/db-upgrade.xml"  database.driver.file="${database.llt.driver.file}" database.driver="${database.llt.driver}"/>
				</then>
			</if>
	</target>

	<target name="install:validation:pre-install" description="Runs pre-install validation checks bda-utils" depends="init:install,init:common">
		<validate-pre-install ant.check.version="${ant.minimum.version}" java.check.version.major="${java.major.version}" java.check.version.minor="${java.minor.version}" database.version="${mysql.minimum.version}" database.url="${database.url}" database.user="${database.username}" database.password="${database.password}" />
	</target>

	<target name="install:validation:pre-install:ports" description="Checks to see if configured ports are listenting and fails buld, meant to be run after install:tomcat:stop" depends="init:install,init:common">
		<validate-ports-preinstall />
	</target>

	<target name="install:validation:post-install" description="Run post-install checks from bda-utils" depends="init:install,init:common">
		<if>
			<not>
				<isset property="exclude.start.servers" />
			</not>
			<then>
				<validate-post-install />
			</then>
		</if>
	</target>

	<target name="install:tomcat" description="Wrapper scripts that calls all required targets to install the tomcat container" unless="exclude.tomcat" depends="
		init:install,
 		init:common,
 		install:validation:pre-install,
 		install:tomcat:stop,		
 		install:validation:pre-install:ports,
 		install:clean:tomcat,
 		install:init,
 		install:tomcat:binaries,
 		install:tomcat:configure,
		install:tomcat:grid,
 		install:tomcat:caXchangeInboundService:re-configure,
 		install:tomcat:caXchangeInboundService,
 		install:tomcat:caXchangeInboundService:configure,
 		install:tomcat:openClinicaConsumerService,
		install:tomcat:grid:configure,
 		install:post:tomcat,
 		install:tomcat:start
		">
	</target>

	<target name="install:mirth" description="Wrapper scripts that calls all required targets to install the mirth container" unless="exclude.mirth" depends="
		init:install,
 		init:common,
 		install:validation:pre-install,
 		install:mirth:stop,
 		install:validation:pre-install:ports,
		install:clean:mirth,
 		install:init,
 		install:mirth:binaries,
		install:mirth:mirth-components,
		install:post:mirth,
 		install:mirth:start,
		install:mirth:channels,
		install:mirth:javascripts
		">
	</target>
	
	<target name="install:activemq" description="Install and starts ActiveMQ" unless="exclude.activemq" depends="
		init:install,
 		init:common,
 		install:validation:pre-install,
		install:activemq:stop,
		install:validation:pre-install:ports,
		install:clean:activemq,
		install:init,
 		install:activemq:binaries,
		install:activemq:start
	">
	</target>

	<target name="install" description="Installs and configures Tomcat, Mirth, ActiveMQ, creates database, and deploys application" depends="
		init:install,
 		init:common,
 		install:validation:pre-install,
 		install:tomcat:stop,
		install:mirth:stop,
 		install:validation:pre-install:ports,
 		install:clean,
 		install:init,
 		install:database,
		install:activemq,		
 		install:tomcat,
		install:mirth,
 		install:post,
 		install:validation:post-install
		">
		<!--		-->
	</target>

	<target name="upgrade:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat" depends="init:upgrade:tomcat,init:common,upgrade-ncm:tomcat">
	</target>

	<target name="upgrade:mirth" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat" depends="init:upgrade:mirth,init:common,upgrade-ncm:mirth">
	</target>

	<target name="upgrade" description="Upgrades Tomcat and Database" depends="init:upgrade,init:common,upgrade-ncm">
	</target>

	<target name="upgrade-with-dbinstall" description="Upgrades JBoss and Database" depends="init:upgrade,init:common,upgrade-ncm:with-dbinstall">
	</target>

	<target name="upgrade-dac:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat" depends="
		init:upgrade:tomcat,
 		init:common,
 		install:validation:pre-install,
 		install:tomcat:stop,
 		install:validation:pre-install:ports,
 		install:clean:tomcat,
 		install:init,
 		install:tomcat:binaries,
 		install:tomcat:configure,
 		install:tomcat:caXchangeInboundService:re-configure,
 		install:tomcat:caXchangeInboundService,
 		install:tomcat:caXchangeInboundService:configure,
 		install:tomcat:openClinicaConsumerService,
 		upgrade:post:tomcat,
 		install:post:tomcat,
 		install:tomcat:start
		">
	</target>

	<target name="upgrade-dac" description="Upgrades JBoss and Database" depends="
		init:upgrade,
 		init:common,
 		install:validation:pre-install,
 		install:tomcat:stop,
 		install:init,
 		upgrade:database,
 		upgrade:tomcat,
 		install:validation:post-install
		">
	</target>

	<target name="upgrade-dac:with-dbinstall" description="Upgrades JBoss and Database" depends="
		init:upgrade,
 		init:common,
 		install:validation:pre-install,
 		install:tomcat:stop,
 		install:init,
 		install:database,
 		upgrade:tomcat,
 		install:validation:post-install
		">
	</target>

	<target name="upgrade-cm:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat" depends="
		init:upgrade:tomcat,
 		init:common,
 		install:validation:pre-install,
 		install:tomcat:stop,
 		install:validation:pre-install:ports,
 		install:init,
 		install:tomcat:configure,
 		install:tomcat:caXchangeInboundService:re-configure,
 		install:tomcat:caXchangeInboundService,
 		install:tomcat:caXchangeInboundService:configure,
 		install:tomcat:openClinicaConsumerService,
 		upgrade:post:tomcat,
 		install:post:tomcat,
 		install:tomcat:start
		">
	</target>

	<target name="upgrade-cm" description="Upgrades JBoss and Database" depends="
		init:upgrade,
 		init:common,
 		install:validation:pre-install,
 		install:tomcat:stop,
 		install:init,
 		upgrade:database,
 		upgrade:tomcat,
 		install:validation:post-install
		">
	</target>

	<target name="upgrade-cm:with-dbinstall" description="Upgrades JBoss and Database" depends="
		init:upgrade,
 		init:common,
 		install:validation:pre-install,
 		install:tomcat:stop,
 		install:init,
 		install:database,
 		upgrade:tomcat,
 		install:validation:post-install
		">
	</target>

	<target name="upgrade-ncm:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat" depends="
		init:upgrade:tomcat,
 		init:common,
 		install:tomcat:stop,
 		install:init,
 		install:tomcat:caXchangeInboundService:re-configure,
 		upgrade-ncm:tomcat:caXchangeInboundService,
 		install:tomcat:caXchangeInboundService:configure,
 		install:post:tomcat,
 		install:tomcat:start
		">
	</target>

	<target name="upgrade-ncm:mirth" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat" depends="
		init:upgrade:tomcat,
 		init:common,
 		install:mirth:stop,
 		install:init,
 		upgrade-ncm:mirth:mirth-components,
 		install:post:mirth,
 		install:mirth:start
		">
	</target>

	<target name="upgrade-ncm" description="Upgrades Tomcat, mirth, and Database" depends="
		init:upgrade,
 		init:common,
 		install:validation:pre-install,
		install:mirth:stop,
 		install:tomcat:stop,
 		install:init,
 		upgrade:database,
		upgrade:mirth,
 		upgrade:tomcat,		
 		install:validation:post-install
		">
	</target>

	<target name="upgrade-ncm:with-dbinstall" description="Upgrades JBoss and Database" depends="
		init:upgrade,
 		init:common,
 		install:validation:pre-install,
		install:mirth:stop,
 		install:tomcat:stop,
 		install:init,
 		install:database,
 		upgrade:tomcat,
 		install:validation:post-install
		">
	</target>

	<target name="upgrade:database" description="Upgrades database using BDA Datbase Upgrade process." unless="exclude.database" depends="
		init:upgrade,
		init:common,
		install:database:prep
		">
            <database-upgrade database.url="${database.url}" database.user="${database.username}" database.password="${database.password}" database.schema="${database.schema}" database.changelog.file="${db.caxchange-upgrade.dir.dest}/db-upgrade.xml" />
            <database-tag database.url="${database.url}" database.user="${database.username}" database.password="${database.password}" database.schema="${database.schema}" />
	    <if>
		<equals arg1="${llt.deploy}" arg2="true" />
		<then>
			<if>
			<equals arg1="${suite.mode}" arg2="false" />
			<then>
			<database-upgrade database.url="${database.url}" database.user="${database.username}" database.password="${database.password}" database.schema="${database.schema}" database.changelog.file="${db.csm-upgrade.dir.dest}/db-upgrade.xml" />			        
			</then>
			</if>				        
			<database-upgrade database.url="${database.llt.url}" database.user="${database.llt.username}" database.password="${database.llt.password}" database.schema="${database.llt.name}" database.changelog.file="${db.llt-upgrade.dir.dest}/db-upgrade.xml"  database.driver.file="${database.llt.driver.file}" database.driver="${database.llt.driver}"/>
			<database-tag database.url="${database.llt.url}" database.user="${database.llt.username}" database.password="${database.llt.password}" database.schema="${database.llt.name}" database.driver="${database.llt.driver}" />
		</then>
	    </if>		
	</target>

	<target name="upgrade:database:tag" description="Tags current state of database with a tag to allow for rollback of database to previous versions." unless="exclude.database" depends="
		init:upgrade,
		init:common,
		install:init,
		install:database:prep
		">
		<database-tag />
	</target>

	<target name="upgrade:database:rollback" description="Rolls back database to previous tagged version using rollback scripts." unless="exclude.database" depends="
		init:upgrade,
		init:common,
		install:init,
		install:database:prep
		">
		<database-rollback />
	</target>

	<target name="install:tomcat:binaries" description="Install tomcat binaries" unless="exclude.tomcat" depends="init:install,init:common">
		<delete dir="${tomcat.home}" />
		<dirname file="${tomcat.home}" property="tomcat.base.dir" />
		<unzip dest="${tomcat.base.dir}" src="${tools.dir}/${tomcat.binaries.file}" />
		<if>
			<os family="unix" />
			<then>
				<chmod dir="${tomcat.home}/bin" perm="ugo+rx" includes="**/*.sh" />
			</then>
		</if>
	</target>

	<target name="install:mirth:binaries" description="Install mirth binaries" unless="exclude.mirth" depends="init:install,init:common">
		<delete dir="${mirth.home}" />
		<dirname file="${mirth.home}" property="mirth.base.dir" />
		<!--<unzip dest="${mirth.base.dir}/mirth" src="${tools.dir}/${mirth.binaries.file}" />-->
		<unzip dest="${mirth.home}" src="${tools.dir}/${mirth.binaries.file}" />
		<if>
			<os family="unix" />
			<then>
				<chmod dir="${mirth.home}/bin" perm="ugo+rx" includes="**/*.sh" />
			</then>
		</if>
	</target>
	
	<target name="install:activemq:binaries" description="Install activemq binaries" unless="exclude.activemq" depends="init:install,init:common">
		<delete dir="${activemq.home}" />
		<dirname file="${activemq.home}" property="activemq.base.dir" />		
		<unzip dest="${application.base.path}" src="${tools.dir}/${activemq.binaries.file}" />
		<if>
			<os family="unix" />
			<then>
				<chmod dir="${activemq.home}/bin" perm="ugo+rx" includes="**/*.sh" />
			</then>
		</if>
	</target>

	<target name="install:tomcat:configure" description="Configure tomcat (change ports)" unless="exclude.tomcat" depends="init:install,init:common">
		<tomcat-configure tomcat.grid.configure="true" />
	</target>

	<target name="install:tomcat:stop" description="Stop Tomcat" unless="exclude.tomcat" depends="init:install,init:common">
		<if>
			<available file="${tomcat.home}/bin/shutdown.sh" />
			<then>
				<echo message="Shutting down tomcat" />
				<tomcat-stop tomcat.home="${tomcat.home}" />
			</then>
			<else>
				<echo message="Tomcat not found , not shutting down tomcat" />
			</else>
		</if>
	</target>

	<target name="install:mirth:stop" description="Stop mirth" unless="exclude.mirth" depends="init:install,init:common">
		<if>
			<available file="${mirth.home}/mirth-start-stop.bat" />
			<then>
				<echo message="Shutting down mirth" />
				<mirth-stop mirth.home="${mirth.home}" />
			</then>
			<else>
				<echo message="stop script not found , not shutting down mirth" />
			</else>
		</if>
	</target>
	
	<target name="install:activemq:stop" description="Stop active" unless="exclude.activemq" depends="init:install,init:common">
		<if>
			<available file="${activemq.home}/activemq-start-stop.bat" />
			<then>
				<echo message="Shutting down activemq" />
				<mirth-stop mirth.home="${activemq.home}" />
			</then>
			<else>
				<echo message="stop script not found , not shutting down activemq" />
			</else>
		</if>
	</target>

	<target name="install:tomcat:start" description="Start Tomcat" unless="exclude.tomcat" depends="init:install,init:common">
		<if>
			<not>
				<isset property="exclude.start.servers" />
			</not>
			<then>
				<tomcat-start tomcat.home="${tomcat.home}" />
			</then>
		</if>
	</target>

	<target name="install:mirth:start" description="Start mirth" unless="exclude.mirth" depends="init:install,init:common">
		<if>
			<not>
				<isset property="exclude.start.servers" />
			</not>
			<then>
				<echo message="Starting mirth" />
				<mirth-start mirth.home="${mirth.home}" />				
			</then>
		</if>
	</target>
	
	<target name="install:activemq:start" description="Start activemq" unless="exclude.activemq" depends="init:install,init:common">
		<if>
			<not>
				<isset property="exclude.start.servers" />
			</not>
			<then>
				<echo message="Starting activemq" />
				<activemq-start activemq.home="${activemq.home}" />
			</then>
		</if>
	</target>

	<target name="install:tomcat:grid" description="Deploy grid to tomcat" unless="exclude.tomcat" depends="init:install,init:common">
		<mkdir dir="${tomcat.home}/webapps/${grid.dir.dest}" />
		<unzip dest="${tomcat.home}/common/lib" src="${grid.resource.dir}/${resource.file.globus-lib}">
			<patternset>
				<exclude name="**/cog-tomcat.jar" />
			</patternset>
		</unzip>
		<unzip dest="${tomcat.home}/server/lib" src="${grid.resource.dir}/${resource.file.globus-lib}">
			<patternset>
				<include name="**/cog-tomcat.jar" />
			</patternset>
		</unzip>
		<!-- <unzip dest="${tomcat.home}/webapps/${grid.dir.dest}" src="${grid.application.dir}/${grid.artifact.file}" /> -->
	</target>

	<target name="install:tomcat:grid:configure" description="Configure tomcat-application" unless="exclude.tomcat" depends="init:install,init:common">
		<!--
			<grid-appserver-configure
				appserver.conf.dir="${tomcat.home}/conf"
				appserver.webapp.dir="${tomcat.home}/webapps"
				appserver.server-xml.file="${tomcat.home}/conf/server.xml"
				appserver.server-xml.service.name="Catalina"
				appserver.port.http="${tomcat.port.http}"
				appserver.port.ssl="${tomcat.port.ssl}"
				appserver.hostname="${tomcat.hostname}"
				appserver.external.http.host="${tomcat.external.http.host}"
				grid.external.secure.host="${grid.external.secure.host}"
				grid.external.secure.port="${grid.external.secure.port}"
				/>
			-->
		<tomcat-configure-grid />
	</target>

	<target name="install:post" depends="
		init:install,
 		init:common,
 		install:post:tomcat
		">
	</target>

	<target name="install:post:tomcat" unless="exclude.tomcat" depends="init:install,init:common">
		<if>
			<not>
				<equals arg1="${exclude.tomcat.backup}" arg2="true" />
			</not>
			<then>
				<property name="changelogFile" location="${install-logs.dir}/changeLog-${install.time}.txt" />
				<property name="compare1.dir" location="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}" />
				<property name="compare2.dir" location="${tomcat.home}" />
				<report-dir-diff dir1="${compare1.dir}" dir2="${compare2.dir}" reportFile="${changelogFile}" />

				<mkdir dir="${tomcat.home}/server/${tomcat.server.name}/log" />
				<mkdir dir="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}/server/${tomcat.server.name}/log" />
				<copy todir="${tomcat.home}/server/${tomcat.server.name}/log">
					<fileset dir="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}/server/${tomcat.server.name}/log">
						<include name="*" />
					</fileset>
				</copy>
			</then>
		</if>
	</target>

	<target name="install:post:mirth" unless="exclude.mirth" depends="init:install,init:common">
		<if>
			<not>
				<equals arg1="${exclude.tomcat.backup}" arg2="true" />
			</not>
			<then>
				<property name="changelogFile" location="${install-logs.dir}/changeLog-${install.time}.txt" />
				<property name="compare1.dir" location="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}" />
				<property name="compare2.dir" location="${tomcat.home}" />
				<report-dir-diff dir1="${compare1.dir}" dir2="${compare2.dir}" reportFile="${changelogFile}" />

				<mkdir dir="${tomcat.home}/server/${tomcat.server.name}/log" />
				<mkdir dir="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}/server/${tomcat.server.name}/log" />
				<copy todir="${tomcat.home}/server/${tomcat.server.name}/log">
					<fileset dir="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}/server/${tomcat.server.name}/log">
						<include name="*" />
					</fileset>
				</copy>
			</then>
		</if>
	</target>

	<target name="install:tomcat:caXchangeInboundService" description="Deploy caXchangeInboundService and common libraries to tomcat installation" unless="exclude.tomcat" depends="init:install,init:common">
		<delete dir="${tomcat.home}/temp" />
		<delete dir="${tomcat.home}/work" />

		<!-- unwar the inbound service war file (wsrf-caxchange), replace the tokens and then war it again before deploying -->
		<copy file="${caXchangeInboundService.dir.dist}/${caXchangeInboundService.war.file}" tofile="${caXchangeInboundService.dir.dist}/${caXchangeInboundService.war.file}.back" overwrite="true" />
		<unwar src="${caXchangeInboundService.dir.dist}/${caXchangeInboundService.war.file}" dest="${working.dir}/${caXchangeInboundService.name}">
		</unwar>
		<copy todir="${temp.dir}/${caXchangeInboundService.name}" overwrite="true">
			<fileset dir="${working.dir}/${caXchangeInboundService.name}/WEB-INF/etc/cagrid_${grid.application.name}">
				<include name="*" />
			</fileset>
			<filterset refid="embedded.filterset" />
			<filterset>
				<filtersfile file="${properties.file}" />
				<filtersfile file="project.properties" />
			</filterset>
		</copy>
		<copy todir="${working.dir}/${caXchangeInboundService.name}/WEB-INF/etc/cagrid_${grid.application.name}" overwrite="true">
			<fileset dir="${temp.dir}/${caXchangeInboundService.name}">
			</fileset>
		</copy>
		
		<xmltask preservetype="true" source="${working.dir}/${caXchangeInboundService.name}/WEB-INF/etc/globus_wsrf_core/server-config.wsdd" dest="${working.dir}/${caXchangeInboundService.name}/WEB-INF/etc/globus_wsrf_core/server-config.wsdd">
			<xmlcatalog refid="bda.xml.catalog"/>
			<insert  path="//*[local-name()='globalConfiguration']" >
				<![CDATA[
					<parameter name="disableDNS" value="true"/>
					<parameter name="logicalHost" value="${tomcat.hostname}"/>
				]]>
			</insert>
		</xmltask>		

		<copy todir="${tomcat.home}/webapps/${caXchangeInboundService.name}">
			<fileset dir="${working.dir}/${caXchangeInboundService.name}">
			</fileset>
		</copy>
                <delete dir="${tomcat.home}/webapps/${caXchange.wsrf.old.war.name}" />
                
		<!-- <zip destfile="${caXchangeInboundService.dir.dist}/${caXchangeInboundService.name}.zip" basedir="${working.dir}/${caXchangeInboundService.name}">
		</zip>
		<unzip dest="${tomcat.home}/webapps/${caXchangeInboundService.name}" src="${caXchangeInboundService.dir.dist}/${caXchangeInboundService.name}.zip" /> -->

		<!-- <war destfile="${caXchangeInboundService.dir.dist}/${caXchangeInboundService.war.file}" update="true" basedir="${working.dir}/${caXchangeInboundService.name}" /> -->
		<!-- <copy file="${caXchangeInboundService.dir.dist}/${caXchangeInboundService.war.file}" todir="${tomcat.home}/webapps" overwrite="true" /> -->
		<!-- <copy file="${caXchangeInboundService.dir.dist}/${caXchangeInboundService.war.file}" todir="${tomcat.home}/webapps" overwrite="true" /> -->

		<!--  Many NCI applications require clm for csm, so you can point this to where you have the version you want to use
		<copy file="${bda-utils.dir}/clm-3.2.jar" todir="${tomcat.home}/server/${tomcat.server.name}/lib" overwrite="true" />
		-->
		<copy file="${database.driver.file}" todir="${tomcat.home}/common/lib" overwrite="true" />
		<copy file="${database.llt.driver.file}" todir="${tomcat.home}/common/lib" overwrite="true" />

		<mkdir dir="${tomcat.home}/conf/caXchange" />
		<copy file="${common.resource.dir.dest}/conf/servicemix/caxchange.properties" todir="${tomcat.home}/conf/caXchange" overwrite="true" />
		<if>
			<equals arg1="${llt.deploy}" arg2="true" />
			<then>
				<copy file="${common.resource.dir.src}/llt-war/llt.war" todir="${tomcat.home}/webapps" overwrite="true" />
				<loadproperties  srcFile="${tomcat.home}/conf/catalina.properties">
				     <filterchain>
					<tokenfilter>
					    <replacestring from="${catalina.base}" to="${tomcat.home}"/>
					</tokenfilter>				     
					 <linecontains>
					   <contains value="java.security.auth.login.config"/>
					 </linecontains>
				     </filterchain>
				</loadproperties>
				<groovy>
				  def ant = new AntBuilder()
				  if (properties['java.security.auth.login.config'] == null) {
				     String src = properties['common.resource.dir.dest']+"/conf/tomcat/llt-login.config"
				     String dest = properties['tomcat.home']+"/conf/login.config"
				     ant.copy(file:src, tofile: dest)
				     File catalinaProperties = new File(properties['tomcat.home']+"/conf/catalina.properties");
				     println "Adding java.security.auth.login.config to catalina.properties"
				     catalinaProperties.append("\njava.security.auth.login.config=\${catalina.base}/conf/login.config\n")
				  } else {
				     //Read the login.config and look for the CLM section
				     def clmPattern = ~/CLM\s*\{\p{ASCII}*\};/
				     File loginConfig = new File(properties['java.security.auth.login.config'])
				     loginConfigText = loginConfig.text
				     println "Found the login.config file"
				     if (clmPattern.matcher(loginConfigText).find()) {
				        println "JAAS entry for CLM exists"
				        File srcLoginConfig = new File(properties['common.resource.dir.dest']+"/conf/tomcat/llt-login.config");
				        updatedText = clmPattern.matcher(loginConfigText).replaceFirst(srcLoginConfig.text);
				        loginConfig.write(updatedText);
				        println "JAAS entry for CLM updated"
				        
				     } else {
				        println "JAAS entry for CLM does not exist"
				        File srcLoginConfig = new File(properties['common.resource.dir.dest']+"/conf/tomcat/llt-login.config");
				        loginConfig.append("\n"+srcLoginConfig.text)
				        println "JAAS entry for CLM added"
				     }
				   }
				</groovy>
				<xmltask preservetype="true" source="${tomcat.home}/conf/server.xml" dest="${tomcat.home}/conf/server.xml">
					<xmlcatalog refid="bda.xml.catalog"/>
					<remove path="/Server/Service[@name='Catalina']/Engine[@name='Catalina']/Host[@appBase='webapps']/Context[@path='/llt']"/>
					<insert path="/Server/Service[@name='Catalina']/Engine[@name='Catalina']/Host[@appBase='webapps']"
					        file="${common.resource.dir.dest}/conf/tomcat/llt-server.xml" />
			        </xmltask>
			</then>
		</if>
	</target>

	<target name="install:tomcat:openClinicaConsumerService" description="Deploy openClinicaConsumerService and common libraries to tomcat installation" unless="exclude.tomcat" depends="init:install,init:common">
		<delete dir="${tomcat.home}/temp" />
		<delete dir="${tomcat.home}/work" />

		<!-- unwar the openClinicaConsumerservice war file (openClinicaConsumer), replace the tokens and then war it again before deploying -->
		<copy file="${openclinicaConsumerService.dir.dist}/${openclinicaConsumerService.war.file}" tofile="${openclinicaConsumerService.dir.dist}/${openclinicaConsumerService.war.file}.back" overwrite="true" />
		<unwar src="${openclinicaConsumerService.dir.dist}/${openclinicaConsumerService.war.file}" dest="${working.dir}/${openclinicaConsumerService.name}">
		</unwar>
		<copy todir="${temp.dir}/${openclinicaConsumerService.name}" overwrite="true">
			<fileset dir="${working.dir}/${openclinicaConsumerService.name}/WEB-INF/etc/cagrid_CaXchangeConsumerService">
				<include name="*" />
			</fileset>
			<filterset>
				<filtersfile file="${properties.file}" />
				<filtersfile file="project.properties" />
			</filterset>
		</copy>

		<copy todir="${working.dir}/${openclinicaConsumerService.name}/WEB-INF/etc/cagrid_CaXchangeConsumerService" overwrite="true">
			<fileset dir="${temp.dir}/${openclinicaConsumerService.name}">
			</fileset>
		</copy>

		<copy todir="${temp.dir}/${openclinicaConsumerService.name}/classes" overwrite="true">
		        <fileset dir="${working.dir}/${openclinicaConsumerService.name}/WEB-INF/classes">
				<include name="*" />
			</fileset>
			<filterset>
				<filtersfile file="${properties.file}" />
				<filtersfile file="project.properties" />
			</filterset>			
		</copy>
		
		<copy todir="${working.dir}/${openclinicaConsumerService.name}/WEB-INF/classes" overwrite="true">
			<fileset dir="${temp.dir}/${openclinicaConsumerService.name}/classes">
			</fileset>
		</copy>
		
		<copy todir="${tomcat.home}/webapps/${openclinicaConsumerService.name}">
			<fileset dir="${working.dir}/${openclinicaConsumerService.name}">
			</fileset>
		</copy>

	</target>
	
	<target name="upgrade-ncm:tomcat:openClinicaConsumerService" description="Deploy openClinicaConsumerService and common libraries to tomcat installation" unless="exclude.tomcat" depends="init:install,init:common">
		<!--
		<delete dir="${tomcat.home}/temp" />
		<delete dir="${tomcat.home}/work" />
		-->

		<!-- unwar the openClinicaConsumerservice war file (openClinicaConsumer), replace the tokens and then war it again before deploying -->
		<copy file="${openclinicaConsumerService.dir.dist}/${openclinicaConsumerService.war.file}" tofile="${openclinicaConsumerService.dir.dist}/${openclinicaConsumerService.war.file}.back" overwrite="true" />
		<unwar src="${openclinicaConsumerService.dir.dist}/${openclinicaConsumerService.war.file}" dest="${working.dir}/${openclinicaConsumerService.name}">
		</unwar>
		<copy todir="${temp.dir}/${openclinicaConsumerService.name}" overwrite="true">
			<fileset dir="${working.dir}/${openclinicaConsumerService.name}/WEB-INF/etc/cagrid_CaXchangeConsumerService">
				<include name="*" />
			</fileset>
			<filterset>
				<filtersfile file="${properties.file}" />
				<filtersfile file="project.properties" />
			</filterset>
		</copy>

		<copy todir="${working.dir}/${openclinicaConsumerService.name}/WEB-INF/etc/cagrid_CaXchangeConsumerService" overwrite="true">
			<fileset dir="${temp.dir}/${openclinicaConsumerService.name}">
			</fileset>
		</copy>

		<copy todir="${temp.dir}/${openclinicaConsumerService.name}/classes" overwrite="true">
		        <fileset dir="${working.dir}/${openclinicaConsumerService.name}/WEB-INF/classes">
				<include name="*" />
			</fileset>
			<filterset>
				<filtersfile file="${properties.file}" />
				<filtersfile file="project.properties" />
			</filterset>			
		</copy>
		
		<copy todir="${working.dir}/${openclinicaConsumerService.name}/WEB-INF/classes" overwrite="true">
			<fileset dir="${temp.dir}/${openclinicaConsumerService.name}/classes">
			</fileset>
		</copy>
		
		<copy todir="${tomcat.home}/webapps/${openclinicaConsumerService.name}">
			<fileset dir="${working.dir}/${openclinicaConsumerService.name}">
			</fileset>
		</copy>

	</target>

	<target name="upgrade-ncm:tomcat:caXchangeInboundService" description="Deploy caXchangeInboundService" unless="exclude.tomcat" depends="init:install,init:common">
		<!--
		<delete dir="${tomcat.home}/temp" />
		<delete dir="${tomcat.home}/work" />
		-->

		<copy file="${caXchangeInboundService.dir.dist}/${caXchangeInboundService.war.file}" tofile="${caXchangeInboundService.dir.dist}/${caXchangeInboundService.war.file}.back" overwrite="true" />
		<unwar src="${caXchangeInboundService.dir.dist}/${caXchangeInboundService.war.file}" dest="${working.dir}/${caXchangeInboundService.name}">
		</unwar>
		<copy todir="${temp.dir}/${caXchangeInboundService.name}" overwrite="true">
			<fileset dir="${working.dir}/${caXchangeInboundService.name}/WEB-INF/etc/cagrid_${grid.application.name}">
				<include name="*" />
			</fileset>
			<filterset refid="embedded.filterset" />
			<filterset>
				<filtersfile file="${properties.file}" />
				<filtersfile file="project.properties" />
			</filterset>
		</copy>
		<copy todir="${working.dir}/${caXchangeInboundService.name}/WEB-INF/etc/cagrid_${grid.application.name}" overwrite="true">
			<fileset dir="${temp.dir}/${caXchangeInboundService.name}">
			</fileset>
		</copy>
		
		<xmltask preservetype="true"  source="${working.dir}/${caXchangeInboundService.name}/WEB-INF/etc/globus_wsrf_core/server-config.wsdd" dest="${working.dir}/${caXchangeInboundService.name}/WEB-INF/etc/globus_wsrf_core/server-config.wsdd">
			<xmlcatalog refid="bda.xml.catalog"/>
			<insert  path="//*[local-name()='globalConfiguration']" >
				<![CDATA[
					<parameter name="disableDNS" value="true"/>
					<parameter name="logicalHost" value="${tomcat.hostname}"/>
				]]>
			</insert>
		</xmltask>		

		<copy todir="${tomcat.home}/webapps/${caXchangeInboundService.name}">
			<fileset dir="${working.dir}/${caXchangeInboundService.name}">
			</fileset>
		</copy>
		
		<delete dir="${tomcat.home}/webapps/${caXchange.wsrf.old.war.name}" />

		<copy file="${common.resource.dir.dest}/conf/mirth/caxchange.properties" todir="${tomcat.home}/conf/caXchange" overwrite="true" />
		<if>
			<equals arg1="${llt.deploy}" arg2="true" />
			<then>
				<copy file="${common.resource.dir.src}/llt-war/llt.war" todir="${tomcat.home}/webapps" overwrite="true" />
				<loadproperties  srcFile="${tomcat.home}/conf/catalina.properties">
				     <filterchain>
					<tokenfilter>
					    <replacestring from="${catalina.base}" to="${tomcat.home}"/>
					</tokenfilter>				     
					 <linecontains>
					   <contains value="java.security.auth.login.config"/>
					 </linecontains>
				     </filterchain>
                               </loadproperties>
				<groovy>
				  def ant = new AntBuilder()
				  if (properties['java.security.auth.login.config'] == null) {
				     String src = properties['common.resource.dir.dest']+"/conf/tomcat/llt-login.config"
				     String dest = properties['tomcat.home']+"/conf/login.config"
				     ant.copy(file:src, tofile: dest)
				     File catalinaProperties = new File(properties['tomcat.home']+"/conf/catalina.properties");
				     println "Adding java.security.auth.login.config to catalina.properties"
				     catalinaProperties.append("\njava.security.auth.login.config=\${catalina.base}/conf/login.config\n")
				  } else {
				     //Read the login.config and look for the CLM section
				     def clmPattern = ~/CLM\s*\{\p{ASCII}*\};/
				     File loginConfig = new File(properties['java.security.auth.login.config'])
				     loginConfigText = loginConfig.text
				     println "Found the login.config file"
				     if (clmPattern.matcher(loginConfigText).find()) {
				        println "JAAS entry for CLM exists"
				        File srcLoginConfig = new File(properties['common.resource.dir.dest']+"/conf/tomcat/llt-login.config");
				        updatedText = clmPattern.matcher(loginConfigText).replaceFirst(srcLoginConfig.text);
				        loginConfig.write(updatedText);
				        println "JAAS entry for CLM updated"
				        
				     } else {
				        println "JAAS entry for CLM does not exist"
				        File srcLoginConfig = new File(properties['common.resource.dir.dest']+"/conf/tomcat/llt-login.config");
				        loginConfig.append("\n"+srcLoginConfig.text)
				        println "JAAS entry for CLM added"
				     }
				   }
				</groovy>
				<xmltask preservetype="true" source="${tomcat.home}/conf/server.xml" dest="${tomcat.home}/conf/server.xml">
					<xmlcatalog refid="bda.xml.catalog"/>
					<remove path="/Server/Service[@name='Catalina']/Engine[@name='Catalina']/Host[@appBase='webapps']/Context[@path='/llt']"/>
					<insert path="/Server/Service[@name='Catalina']/Engine[@name='Catalina']/Host[@appBase='webapps']"
					        file="${common.resource.dir.dest}/conf/tomcat/llt-server.xml" />
			        </xmltask>                               
			</then>
		</if>

	</target>

	<target name="install:mirth:mirth-components" description="Deploy mirth-components and common libraries to mirth installation" unless="exclude.tomcat" depends="init:install,init:common">
		
		<copy todir="${mirth.home}/lib/custom" overwrite="true" file="${mirth-components.dir.dist}/ihub-mirth-components.jar" />
		
	</target>
	
	<target name="install:mirth:channels" description="Import, deploy and starts channels in mirth" unless="exclude.tomcat" depends="init:install,init:common">
		<ant inheritAll="false" inheritRefs="false" antfile="${mirth-components.dir.dist}/shellAnt.xml" target="import">
			<property name="mirth_home" value="${mirth.home}" />
			<property name="channels_dir" value="${mirth-components.dir.dist}/channels" />
		</ant>		
	</target>

	<target name="install:mirth:javascripts" description="Imports the named global script for mirth channels" unless="exclude.tomcat" depends="init:install,init:common">
		<echo message="Filtering java script"/>
		<copy todir="${mirth-components.dir.dist}\javascript\" filtering="true" overwrite="true" file="${mirth-components.dir.dist}\javascript\global-scripts\at-deploy-script.xml" >
			<filterset refid="embedded.filterset" />
			<filterset>
				<filtersfile file="${properties.file}" />				
			</filterset>			
		</copy>
		<ant inheritAll="false" inheritRefs="false" antfile="${mirth-components.dir.dist}/shellAnt.xml" target="importscript">
			<property name="mirth_home" value="${mirth.home}" />
			<property name="deployScript_name" value="${mirth-components.dir.dist}\javascript\at-deploy-script.xml" />
		</ant>		
	</target>
	
	<target name="upgrade-ncm:mirth:mirth-components" description="Deploy mirth-components and common libraries to mirth installation" unless="exclude.tomcat" depends="init:install,init:common,install:mirth:mirth-components">
		
	</target>


	<target name="install:tomcat:caXchangeInboundService:configure" description="Configure caXchangeInboundService application, copies over externalized properties or configurations that are not part of the tomcat configuration" unless="exclude.tomcat" depends="init:install,init:common">
		<!-- configure datasource -->
	</target>

	<target name="install:tomcat:caXchangeInboundService:re-configure" description="Configure caXchangeInboundService application, copies over externalized properties or configurations that are not part of the tomcat configuration" unless="exclude.tomcat" depends="init:install,init:common">
	</target>

	<target name="init:install" unless="upgrade.running">
		<property name="install.running" value="true" />
		<!-- Set application.base.path based on platform -->
		<condition property="application.base.path" value="${application.base.path.linux}">
			<or>
				<os family="unix" />
				<os family="mac" />
			</or>
		</condition>

		<condition property="application.base.path" value="${application.base.path.windows}">
			<os family="windows" />
		</condition>
		<echo message="application.base.path=${application.base.path}" />
		<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}" />
		<property name="mirth.home" value="${application.base.path}/${mirth.relative.path}" />
		<property name="activemq.home" value="${application.base.path}/${activemq.relative.path}" />
	</target>

	<target name="init:upgrade" depends="
		init:upgrade:tomcat, init:upgrade:mirth
		" unless="install.running">
	</target>

	<target name="init:upgrade:tomcat" unless="install.running" depends="
		init:upgrade:prep
		">
	</target>

	<target name="init:upgrade:mirth" unless="install.running" depends="
		init:upgrade:prep
		">
	</target>

	<target name="init:upgrade:prep">

		<properties-print properties.list="application.base.path,tomcat.home" />
		<if>
			<not>
				<isset property="application.base.path" />
			</not>
			<then>
				<!-- Set application.base.path based on platform -->
				<condition property="application.base.path" value="${application.base.path.linux}">
					<or>
						<os family="unix" />
						<os family="mac" />
					</or>
				</condition>

				<condition property="application.base.path" value="${application.base.path.windows}">
					<os family="windows" />
				</condition>
				<echo message="application.base.path=${application.base.path}" />
				<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}" />
				<property name="mirth.home" value="${application.base.path}/${mirth.relative.path}" />
			</then>
		</if>

		<property name="upgrade.running" value="true" />
		<!-- Upgrades always use port configs -->
		<available file="${tomcat.home}" property="tomcat.exists" />
		<available file="${mirth.home}" property="mirth.exists" />
	</target>

	<target name="init:readers:custom:tomcat" unless="install.running">
		<!-- call your custom readers here, two properties included in these scripts that don't have readers are "fs-data.base.dir, mail.smtp.server" -->

	</target>

	<target name="init:readers:bda:tomcat" if="tomcat.exists">

		<!-- Make sure the ${properties.file} has at least the following props -->
		<properties-exist properties.list="application.base.path,tomcat.home" />
		<!-- Begin Tomcat readers, delete if you don't need -->
		<osfamily property="os.family" />
		<if>
			<or>
				<equals arg1="${os.family}" arg2="unix" />
				<equals arg1="${os.family}" arg2="mac" />
			</or>
			<then>
				<property name="tomcat.hostname" value="${env.HOSTNAME}" />
			</then>
		</if>
		<if>
			<equals arg1="${os.family}" arg2="windows" />
			<then>
				<property name="tomcat.hostname" value="${env.COMPUTERNAME}" />
			</then>
		</if>
		<tomcat-read-ports />
		<var name="tomcat.ssl.keystore.dir" value="${working.dir}/keys/tomcat" />
		<tomcat-read-ssl copied.keystore.dir="${tomcat.ssl.keystore.dir}" />
		<tomcat-read-external-hostname />
		<grid-read-index-url grid.wsrf.dir="${tomcat.home}/webapps/wsrf" />
		<tomcat-read-grid-secure copied.keystore.dir="${tomcat.grid.secure.dir}" />
		<!--
		<grid-copy-service-metadata
			grid.wsrf.dir="${tomcat.home}/webapps/wsrf"
			copied.service-metadata.dir="${copied.service-metadata.dir1}"
			/>
		-->
		<grid-read-poc grid.wsrf.dir="${tomcat.home}/webapps/wsrf" grid.service.name="Sample" />


		<!-- Fail if any read properties are not set -->
		<echo message="All properties after readers" />
		<properties-print properties.list="${read.properties.list},jboss.server.hostname,tomcat.hostname" />
		<properties-exist properties.list="${read.properties.list},jboss.server.hostname,tomcat.hostname" />
		<properties-write properties.list="${read.properties.list},jboss.server.hostname,tomcat.hostname" />
	</target>

	<target name="upgrade:post:tomcat">
		<!-- place holder -->
	</target>


	<!-- mirth START AND STOP MACROS -->
	<macrodef name="mirth-start" description="Starts mirth instance">
		<attribute name="mirth.home" />
		<sequential>
			<echo message="Macro call: Start mirth" />
			<exec executable="sh" osfamily="unix" dir="@{mirth.home}" spawn="true">
				<arg line="mirth.sh start" />
			</exec>
			<echo message="executing ${bda-utils.dir}/resource/psexec.exe"/>
			<exec osfamily="windows" executable="${bda-utils.dir}/resource/psexec.exe" dir="@{mirth.home}" spawn="true" >
				<env key="NOPAUSE" value="true" />
				<arg line="-d -i -w @{mirth.home} @{mirth.home}/Mirth.exe" />
			</exec>			
			<sleep seconds="10" />
		</sequential>
	</macrodef>

	<macrodef name="mirth-stop" description="Stops mirth instance">
		<attribute name="mirth.home" />
		<sequential>
			<echo message="Macro call: Stop mirth" />
			<exec executable="sh" osfamily="unix" dir="@{mirth.home}" spawn="true">
				<arg line="mirth-daemon.sh stop" />
			</exec>
			<exec osfamily="windows" executable="cmd" dir="@{mirth.home}" spawn="true">
				<arg line="/c mirth-daemon.sh stop ${mirth.home}" />
			</exec>
			<sleep seconds="5" />
		</sequential>
	</macrodef>

	<!-- activemq START MACROS -->
	<macrodef name="activemq-start" description="Starts activemq instance">
		<attribute name="activemq.home" />
		<sequential>
			<echo message="ActiveMQ call: Start activemq" />
			<exec executable="sh" osfamily="unix" dir="@{activemq.home}/bin" spawn="true">
				<arg line="activemq" />
			</exec>
			<echo message="executing ${bda-utils.dir}/resource/psexec.exe"/>
			<exec osfamily="windows" executable="${bda-utils.dir}/resource/psexec.exe" dir="@{activemq.home}/bin" spawn="true" >
				<env key="NOPAUSE" value="true" />
				<arg line="-d -i -w @{activemq.home}/bin @{activemq.home}/bin/activemq.bat" />
			</exec>			
			<sleep seconds="5" />
		</sequential>
	</macrodef>
	
	<!-- NEW TARGETS FROM CAXCHANGE INSTALL SCRIPT -->

	<!--Verifies if there were any error in the routing-->
	<target name="verify-routing" depends="install:init" description="Verifies if there is any changes in the routing pattern">
		<mkdir dir="${mirth-components.dir.dist}/verifyRouting/caXchangeConf" />
		<copy todir="${mirth-components.dir.dist}/verifyRouting/caXchangeConf">
			<fileset dir="${common.resource.dir.dest}/conf/mirth/caXchangeConf" />
		</copy>
		<java dir="${mirth-components.dir.dist}/verifyRouting" jar="${mirth-components.dir.dist}/verifyRouting/caXchange-verify-routing-jar-${caXchange.version}.jar" fork="true" failonerror="true" maxmemory="128m">
			<arg value="-jar" />
			<classpath>
				<pathelement location="${mirth-components.dir.dist}/verifyRouting/caXchange-verify-routing-jar-${caXchange.version}.jar" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</java>
		<delete dir="${mirth-components.dir.dist}/verifyRouting/caXchangeConf">
		</delete>
	</target>


	<target name="configure-gme-database-using-mySQL" description="Imports the CCTS message schemas into the GME database. This requires mySQL installed.">
		<!--<chmod file="${db.gme.temp.home}/gmeImportDb.sh" perm="744" />-->
		<exec dir="${common.dir.dest.gme}" executable="/bin/bash">
			<env key="PATH" path="${env.PATH}:${common.dir.dest.gme}" />
			<arg value="gmeImportDB.sh" />
		</exec>
	</target>

	<target name="configure-gme-database" description="Imports the CCTS message schemas into the GME database. This does not require mySQL installed.">
		<gunzip src="${common.dir.dest.gme}/GME_REGISTRY.sql.gz" dest="${common.dir.dest.gme}">
		</gunzip>
		<echo message="Importing gme database table data into GME_REGISTRY" />
		<sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://${database.gme.host}:${database.gme.port}/${database.gme.name}_GME_REGISTRY" userid="${database.gme.username}" password="${database.gme.password}" onerror="abort">
			<transaction src="${common.dir.dest.gme}/GME_REGISTRY.sql" />
			<transaction>commit;</transaction>
			<classpath>
				<fileset dir="${mirth-components.dir.dist}/lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</sql>
		<gunzip src="${common.dir.dest.gme}/GME_SCHEMA_STORE.sql.gz" dest="${common.dir.dest.gme}">
		</gunzip>
		<echo message="Importing gme database table data into GME_SCHEMA_STORE" />
		<sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://${database.gme.host}:${database.gme.port}/${database.gme.name}_GME_SCHEMA_STORE" userid="${database.gme.username}" password="${database.gme.password}" onerror="abort" escapeprocessing="false">
			<transaction src="${common.dir.dest.gme}/GME_SCHEMA_STORE.sql" />
			<transaction>commit;</transaction>
			<classpath>
				<fileset dir="${mirth-components.dir.dist}/lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</sql>
		<gunzip src="${common.dir.dest.gme}/GME_SCHEMA_CACHE.sql.gz" dest="${common.dir.dest.gme}">
		</gunzip>
		<echo message="Importing gme database table data into GME_SCHEMA_CACHE" />
		<sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://${database.gme.host}:${database.gme.port}/${database.gme.name}_GME_SCHEMA_CACHE" userid="${database.gme.username}" password="${database.gme.password}" onerror="abort">
			<transaction src="${common.dir.dest.gme}/GME_SCHEMA_CACHE.sql" />
			<transaction>commit;</transaction>
			<classpath>
				<fileset dir="${mirth-components.dir.dist}/lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</sql>
		<echo message="Finished Importing databases." />
		<echo message="Changing hostname to ${gme.service.url}." />
		<sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://${database.gme.host}:${database.gme.port}/${database.gme.name}_GME_REGISTRY" userid="${database.gme.username}" password="${database.gme.password}" onerror="abort">
			<transaction>
	    		update NAMESPACES set SERVICE_ID='${gme.service.url}' where SERVICE_id='http://localhost:8090/wsrf/services/cagrid/GlobalModelExchange';
	    		commit;
	    		</transaction>
			<transaction>commit;</transaction>
			<classpath>
				<fileset dir="${mirth-components.dir.dist}/lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</sql>
	</target>

	<target name="update-gme-url" description="Updates the GME url for the ccts.cabig namespace">
		<echo message="Updating the URL to ${gme.service.url}." />
		<sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://${database.gme.host}:${database.gme.port}/${database.gme.name}_GME_REGISTRY" userid="${database.gme.username}" password="${database.gme.password}" onerror="abort">
			<transaction>
	    		update NAMESPACES set SERVICE_ID='${gme.service.url}' where NAMESPACE='ccts.cabig';
	    		commit;
	    		</transaction>
			<transaction>commit;</transaction>
			<classpath>
				<fileset dir="${mirth-components.dir.dist}/lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</sql>

	</target>

</project>
