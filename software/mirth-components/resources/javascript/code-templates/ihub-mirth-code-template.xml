<list>
  <com.webreach.mirth.model.CodeTemplate>
    <id>cff8ac93-a738-452d-8b07-3fe56b4f23ea</id>
    <name>retrieveOverallBroadcastResponseFromDB</name>
    <tooltip>Used primarily for requests involving broadcasting. This function has the logic to wait for a certain amount of time for the response to be aggregated for multiple target services.</tooltip>
    <code>function retrieveOverallBroadcastResponseFromDB(varMessageID){
	var overallResponseString;
	try{
		var dbConn = getIHubDatabaseConnection();
		var overallResponseSQL = &quot;SELECT message.overall_response_data AS message_overall_response_data FROM message WHERE message.message_id=&apos;&quot;+varMessageID+&quot;&apos; AND message.message_status=&apos;&quot;+Packages.gov.nih.nci.ihub.util.HubConstants.MESSAGE_STATUS_PROCESSED+&quot;&apos;&quot;;
		var overallResponseResults = dbConn.executeCachedQuery(overallResponseSQL);

		var totalSecondsElapsed = 0;
		while (overallResponseResults.size() &lt; 1) {
			Packages.java.lang.Thread.sleep(1000);
			overallResponseResults = dbConn.executeCachedQuery(overallResponseSQL);
			totalSecondsElapsed++;
			//the number 62, can be derived instead of hard coding. 62 means 62 seconds of maximum wait time
			if(totalSecondsElapsed &gt;= 62){			
				break;
			}
		}
		if(overallResponseResults.next()){
			overallResponseString = overallResponseResults.getString(&quot;message_overall_response_data&quot;);			
			updateMessageServiceStatusInDB(Packages.gov.nih.nci.ihub.util.HubConstants.MESSAGE_STATUS_RESPONSE_RETURNED, varMessageID);
			dbConn.close();			
		} else {
			//initiate code to put some error response message back in the queue
		}
		return overallResponseString;

	} catch (error) {
		logger.error(&quot;Error occured in Retrieving Response From the Database: &quot;+error);
	}
}

</code>
    <type>FUNCTION</type>
    <scope>2</scope>
  </com.webreach.mirth.model.CodeTemplate>
  <com.webreach.mirth.model.CodeTemplate>
    <id>d55e91c7-714f-445e-a3eb-6a2c772d81c0</id>
    <name>getIHubDatabaseConnection</name>
    <tooltip>Returns database connection for caBIG Integration Hub</tooltip>
    <code>function getIHubDatabaseConnection(){	
	var dbConn = DatabaseConnectionFactory.createDatabaseConnection(globalMap.get(&quot;database.driver&quot;),
					globalMap.get(&quot;database.url&quot;),globalMap.get(&quot;database.username&quot;),globalMap.get(&quot;database.password&quot;));	
	return dbConn;
}</code>
    <type>FUNCTION</type>
    <scope>2</scope>
  </com.webreach.mirth.model.CodeTemplate>
  <com.webreach.mirth.model.CodeTemplate>
    <id>40480fca-b111-42e9-81a6-b460f6bbe670</id>
    <name>aggregateBroadcastResponse</name>
    <tooltip>Generic Aggregator Function that aggregates responses from one or more suite target services</tooltip>
    <code>function aggregateBroadcastResponse(varServiceType, varBusinessMessagePayload, varConsumerIdentifier, varMessageID){
	try{
		logger.debug(&quot;aggregateBroadcastResponse() - START&quot;);
		var activeDestinationCount = globalMap.get(varServiceType+&quot;.active.destination.count&quot;);
		logger.debug(&quot;Active Destination Count in : &quot;+activeDestinationCount);

		var compiledResponseResultSet = getCompiledResponseResultsFromDB(varMessageID);

		var totalSecondsElapsed = 0;
		while (compiledResponseResultSet.size() &lt; activeDestinationCount) {
			Packages.java.lang.Thread.sleep(1000);
			compiledResponseResultSet = getCompiledResponseResultsFromDB(varMessageID);
			totalSecondsElapsed++;
			if(totalSecondsElapsed &gt;= 60){
				//initiate the code for timeout here
				break;
			}
		}

		var responseArrayList = new Packages.java.util.ArrayList();
		var potentialRollbackInvocationStrategyList = new Packages.java.util.ArrayList();
		var isFailureOverallResponse = false;
		if (compiledResponseResultSet.size() == 0){
			isFailureOverallResponse = true;
		}
		while(compiledResponseResultSet.next()){
			var compiledResponseStringToDOMDocument = Packages.gov.nih.nci.ihub.util.IntegrationHubUtil.stringToDOMDocument(
				compiledResponseResultSet.getString(&quot;compiled_target_response_compiled_response&quot;));
			responseArrayList.add(compiledResponseStringToDOMDocument);
			var compiledTargetResponseStatus = compiledResponseResultSet.getString(&quot;compiled_target_response_target_response_status&quot;);
			if(compiledTargetResponseStatus == Packages.gov.nih.nci.ihub.util.HubConstants.TARGET_RESPONSE_STATUS_FAULT){
				isFailureOverallResponse = true;
			} else {
				var targetGlobalInvocationStrategy = globalMap.get($(&apos;ns1metadata_ns1servicetype&apos;)+&quot;_&quot;+compiledResponseResultSet.getString(&quot;compiled_target_response_target_details&quot;)+&quot;_Strategy&quot;);
				if(targetGlobalInvocationStrategy == null){					
					targetGlobalInvocationStrategy = globalMap.get($(&apos;ns1metadata_ns1servicetype&apos;)+&quot;_Strategy&quot;);
				}
				var targetInvocationStrategy = targetGlobalInvocationStrategy.getClass().newInstance();
				targetInvocationStrategy.copyCommonContents(targetGlobalInvocationStrategy);

				targetInvocationStrategy.setServiceUrl(globalMap.get(compiledResponseResultSet.getString(&quot;compiled_target_response_target_details&quot;)+&quot;.&quot;+varServiceType+&quot;.url&quot;));
				targetInvocationStrategy.setSubject(globalMap.get(&quot;subject&quot;+varMessageID));
				targetInvocationStrategy.setServiceProviderName(compiledResponseResultSet.getString(&quot;compiled_target_response_target_details&quot;));
				targetInvocationStrategy.setPayload(varBusinessMessagePayload);

				potentialRollbackInvocationStrategyList.add(targetInvocationStrategy);
			}
		}

		if(isFailureOverallResponse){
			//send rollbacks to targets that executed successfully
			delegateTargetRollbackRequest(varServiceType, potentialRollbackInvocationStrategyList, varMessageID);	
		}

		var aggregatedResponseBuilder = new Packages.gov.nih.nci.ihub.writer.ncies.common.AggregatedResponseBuilder();
		var aggregatedResponse = aggregatedResponseBuilder.buildAggregatedDocument(responseArrayList, false);		
		var generateResponseBean = new Packages.gov.nih.nci.ihub.writer.ncies.common.GenerateResponseBean();
		var overallResponseString = generateResponseBean.generateResponseFromAggregatedResponse(varConsumerIdentifier, 
								varMessageID, aggregatedResponse);
		logger.info(&quot;OverallResponseString in aggregateBroadcastResponse(): &quot;+overallResponseString);
		updateMessageServiceResponseInDB(isFailureOverallResponse, overallResponseString, varMessageID, Packages.gov.nih.nci.ihub.util.HubConstants.MESSAGE_STATUS_PROCESSED);
		logger.debug(&quot;aggregateBroadcastResponse() - END&quot;);
		return overallResponseString;
	} catch (error) {	
		logger.error(&quot;EXCEPTION OCCURED IN MIRTH RESPONSE AGGREGATOR &quot;+error);
	}
}</code>
    <type>FUNCTION</type>
    <scope>2</scope>
  </com.webreach.mirth.model.CodeTemplate>
  <com.webreach.mirth.model.CodeTemplate>
    <id>b59d044f-283f-4037-bf7e-81499dfac111</id>
    <name>updateMessageServiceStatusInDB</name>
    <tooltip>Updates the caBIG Integration Hub&apos;s MESSAGE table with the status for a specific messageID</tooltip>
    <code>function updateMessageServiceStatusInDB(varMessageStatus, varMessageID){
	var dbConn = getIHubDatabaseConnection();
	var updateSQL = &quot;UPDATE MESSAGE SET MESSAGE_STATUS=&apos;&quot;+varMessageStatus+&quot;&apos; WHERE MESSAGE_ID=&apos;&quot;+varMessageID+&quot;&apos;&quot;;
	dbConn.executeUpdate(updateSQL);
	dbConn.close();
}


//primarily used during synchronous processing of message
/*function updateAllMessageServiceStatusesInDB(varMessageStatus, varOverallResponseStatus, varMessageID){
	var dbConn = getIHubDatabaseConnection();
	var updateSQL = &quot;UPDATE MESSAGE SET MESSAGE_STATUS=&apos;&quot;+varMessageStatus+&quot;&apos; OVERALL_RESPONSE_STATUS=&apos;&quot;+varOverallResponseStatus+&quot;&apos; TIME_COMPLETED=? WHERE MESSAGE_ID=&apos;&quot;+varMessageID+&quot;&apos;&quot;;
	dbConn.executeUpdate(updateSQL);
	dbConn.close();
}*/</code>
    <type>FUNCTION</type>
    <scope>2</scope>
  </com.webreach.mirth.model.CodeTemplate>
  <com.webreach.mirth.model.CodeTemplate>
    <id>a6e2cab3-3709-486f-a2b6-3192c9709c0b</id>
    <name>invokeDelegationService</name>
    <tooltip>Invokes the caGrid Credential Delegation Service and returns a security Subject</tooltip>
    <code>function invokeDelegationService(varDelegatedCredentialReference, varCertFilePath, varKeyFilePath, varTargetDetailsCode, varMessageID){
	logger.debug(&quot;invokeDelegationService() - START&quot;);
	var delegateServiceBean = new Packages.gov.nih.nci.ihub.writer.ncies.infrastructure.InvokeDelegationServiceBean($(&apos;ns1metadata_ns1credentials_ns1grididentifier&apos;), 
								varDelegatedCredentialReference, varCertFilePath, varKeyFilePath, globalMap.get(&quot;user.proxy.cache.time.to.live&quot;));
	var subject = delegateServiceBean.invokeDelegationService();		
	logger.debug(&quot;Subject in function invokeDelegationService(): &quot;+subject);	
	logger.debug(&quot;invokeDelegationService() - END&quot;);
	return subject;	
}</code>
    <type>FUNCTION</type>
    <scope>2</scope>
  </com.webreach.mirth.model.CodeTemplate>
  <com.webreach.mirth.model.CodeTemplate>
    <id>5d3618d3-df2d-45ad-a45f-22337a138fb5</id>
    <name>recordMessageProcessingError</name>
    <tooltip>Sets variable such that further message processing is filtered. Also records the error in the database</tooltip>
    <code>function recordMessageProcessingError(varError, varTargetDetailsCode, varMessageID, varExternalID, varBusinessMessageSchemaDefinition, varMessageStatus){
	logger.debug(&quot;recordMessageProcessingError() - START&quot;);
	channelMap.put(&apos;IS_IHUB_PROCESSING_ERROR&apos;, true);	
	var errorMessage = createErrorResponseXML(new Packages.java.lang.Exception(varError), varTargetDetailsCode);
	insertCompiledTargetResponse(errorMessage, varTargetDetailsCode, Packages.gov.nih.nci.ihub.util.HubConstants.TARGET_RESPONSE_STATUS_FAULT, varMessageID);
	var gridInvocationResult = new Packages.gov.nih.nci.ihub.writer.ncies.common.GridInvocationResult(true, 
								createErrorResponseNode(new Packages.java.lang.Exception(varError), varTargetDetailsCode).getFirstChild(), false);
	var generateResponseBean = new Packages.gov.nih.nci.ihub.writer.ncies.common.GenerateResponseBean();
	var overallResponseString = generateResponseBean.generateResponseFromTargetResponse(varExternalID, 
									varMessageID, generateResponseBean.createOutputDocument(varTargetDetailsCode, 
									new Packages.java.lang.String(&quot;&quot;), varBusinessMessageSchemaDefinition, gridInvocationResult));
	updateMessageServiceResponseInDB(true, overallResponseString, varMessageID, varMessageStatus);
	logger.debug(&quot;recordMessageProcessingError() - END&quot;);
	return overallResponseString;
}
</code>
    <type>FUNCTION</type>
    <scope>2</scope>
  </com.webreach.mirth.model.CodeTemplate>
  <com.webreach.mirth.model.CodeTemplate>
    <id>f136d2d9-958a-40fb-9215-4b561762fc0e</id>
    <name>validatePayload</name>
    <tooltip>Validates message payload and returns an error if the validation failes. Returns nothing if the validation is successful</tooltip>
    <code>function validatePayload(varSchemaFactory, varNamespace, varServiceType, varBusinessMessagePayload){
	logger.debug(&quot;validatePayload() - START&quot;);
	var payloadValidator = new Packages.gov.nih.nci.ihub.writer.ncies.infrastructure.validation.PayloadValidator();	
	payloadValidator.setCaxchangeSchemaFactory(varSchemaFactory);			
	payloadValidator.validatePayload(Packages.gov.nih.nci.ihub.util.IntegrationHubUtil.stringToDOMDocument(
		Packages.gov.nih.nci.ihub.util.IntegrationHubUtil.getPayloadFromBusinessPayload(varBusinessMessagePayload)),
		varNamespace,varServiceType);
	logger.debug(&quot;validatePayload() - END&quot;);
}</code>
    <type>FUNCTION</type>
    <scope>2</scope>
  </com.webreach.mirth.model.CodeTemplate>
  <com.webreach.mirth.model.CodeTemplate>
    <id>bc9546f7-b719-46f2-9ade-3f4fb80edd95</id>
    <name>getCagridSubject</name>
    <tooltip>Using caGrid credential and by using caGrid authentication service, returns Subject</tooltip>
    <code>function getCagridSubject(varUsername, varPassword, varAuthenticationServiceURL, varDorianServiceURL){
	logger.debug(&quot;getCagridSubject() - START&quot;);
	var caGridAuthenticationManager = new Packages.gov.nih.nci.ihub.writer.ncies.infrastructure.CaGridAuthenticationManager(varUsername, 
								varPassword, varAuthenticationServiceURL, varDorianServiceURL);
	var subject = caGridAuthenticationManager.getSubject();		
	logger.debug(&quot;Subject in function getCagridSubject(): &quot;+subject);	
	logger.debug(&quot;getCagridSubject() - END&quot;);
	return subject;	
}</code>
    <type>FUNCTION</type>
    <scope>2</scope>
  </com.webreach.mirth.model.CodeTemplate>
  <com.webreach.mirth.model.CodeTemplate>
    <id>8fb1206e-7191-40e7-bb4b-7703a2e826c6</id>
    <name>delegateCaTissueRequest</name>
    <tooltip>Delegates request to caTissue API and compiles the success or error responses</tooltip>
    <code>function delegateCaTissueRequest(varCaTissueUsername, varCaTissuePassword, varBusinessMessagePayload,
			varOperationName, varExternalID, varMessageID, varServiceType, varBusinessMessageXMLSchemaDefinition){
	logger.debug(&quot;delegateCaTissueRequest() - START&quot;);

	var tolvenCaTissueClientBean = new Packages.gov.nih.nci.ihub.writer.ncies.entity.catissue.transcend.TolvenCaTissueClientBean();
	tolvenCaTissueClientBean.setUserName(varCaTissueUsername);
	tolvenCaTissueClientBean.setPassword(varCaTissuePassword);
	var trimParser = new Packages.gov.nih.nci.ihub.writer.ncies.entity.catissue.transcend.TrimParser();
	tolvenCaTissueClientBean.setTrimParser(trimParser);	
	tolvenCaTissueClientBean.createObject(Packages.gov.nih.nci.ihub.util.IntegrationHubUtil.
			stringToDOMDocumentNameSpaceAware(Packages.gov.nih.nci.ihub.util.IntegrationHubUtil.getPayloadFromBusinessPayload(varBusinessMessagePayload)), varOperationName);
	
	var generateResponseBean = new Packages.gov.nih.nci.ihub.writer.ncies.common.GenerateResponseBean();
	var overallResponseString = generateResponseBean.generateResponseFromTargetResponse(varExternalID, 
			varMessageID, generateResponseBean.createOutputDocument(varServiceType, 
			varOperationName, varBusinessMessageXMLSchemaDefinition, 
			new Packages.gov.nih.nci.ihub.writer.ncies.common.GenericInvocationStrategy().getSuccessResult()));

	logger.debug(&quot;delegateCaTissueRequest() - END&quot;);
	return overallResponseString;
}</code>
    <type>FUNCTION</type>
    <scope>2</scope>
  </com.webreach.mirth.model.CodeTemplate>
  <com.webreach.mirth.model.CodeTemplate>
    <id>75d33796-6465-4747-b5d5-68f8beb1f87f</id>
    <name>delegateSingleTargetRequest1</name>
    <tooltip>Delegates request to a SINGLE target caGrid service. Does a one time retry on connection related exceptions. Usage:  ASYNCHRONOUS channels</tooltip>
    <code>function delegateSingleTargetRequest(varServiceType, varTargetInvocationStrategy, varBusinessMessageXMLSchemaDefinition, varMessageID){
	var	varTargetDetailsCode = varTargetInvocationStrategy.getServiceProviderName();
	
	try{
		//logger.info(varTargetDetailsCode+&quot; XML schema definition: &quot;+varBusinessMessageXMLSchemaDefinition);
		if (varBusinessMessageXMLSchemaDefinition == undefined){
			varBusinessMessageXMLSchemaDefinition = &quot;&quot;;
		}

		var gridInvocationResult = varTargetInvocationStrategy.invokeGridService(false);

		if(gridInvocationResult.isFault()){		
			if(gridInvocationResult.isRetry()){
				var retryAttempt=0;
				var totalRetryAttempts = globalMap.get(&quot;target.grid.service.retry.attempts&quot;);
				for (retryAttempt=0; retryAttempt&lt;totalRetryAttempts; retryAttempt++)
				{
					logger.info(varTargetDetailsCode+&quot; Retry Attempt: &quot;+retryAttempt);
					gridInvocationResult = varTargetInvocationStrategy.invokeGridService(false);
					if(gridInvocationResult.isFault()){
						continue;
					} else {
						insertCompiledTargetResponse(createSuccessResponseXML(gridInvocationResult, varTargetDetailsCode, varBusinessMessageXMLSchemaDefinition), 
							varTargetDetailsCode, Packages.gov.nih.nci.ihub.util.HubConstants.TARGET_RESPONSE_STATUS_SUCCESSFUL, varMessageID);
						break;
					}
				}
			} else {
				insertCompiledTargetResponse(createErrorResponseXML(gridInvocationResult.getInvocationException(), varTargetDetailsCode), 
					varTargetDetailsCode, Packages.gov.nih.nci.ihub.util.HubConstants.TARGET_RESPONSE_STATUS_FAULT, varMessageID);
			}
		} else {
			logger.debug(&quot;Calling insertCompiledTargetResponse&quot;);
			insertCompiledTargetResponse(createSuccessResponseXML(gridInvocationResult, varTargetDetailsCode, varBusinessMessageXMLSchemaDefinition), 
					varTargetDetailsCode, Packages.gov.nih.nci.ihub.util.HubConstants.TARGET_RESPONSE_STATUS_SUCCESSFUL, varMessageID);
		}		

	} catch (error) {	
		logger.error(&quot;EXCEPTION OCCURED IN MIRTH DURING &quot;+varTargetDetailsCode+&quot; INVOCATION: &quot;+error);
		insertCompiledTargetResponse(createErrorResponseXML(new Packages.java.lang.Exception(error), varTargetDetailsCode), 
			varTargetDetailsCode, Packages.gov.nih.nci.ihub.util.HubConstants.TARGET_RESPONSE_STATUS_FAULT, varMessageID);
	}
}</code>
    <type>FUNCTION</type>
    <scope>2</scope>
  </com.webreach.mirth.model.CodeTemplate>
  <com.webreach.mirth.model.CodeTemplate>
    <id>62f9997e-8c68-4319-8d52-524a0cd37a08</id>
    <name>delegateSynchronousRequest</name>
    <tooltip>Based on the invocation strategy set by caller, delegates the request to a  SINGLE caGrid service. Does a one time retry on connection related exceptions. Usage: SYNCHRONOUS channels</tooltip>
    <code>function delegateSynchronousRequest(varServiceType, varTargetInvocationStrategy, varMessageID, varExternalID, varOperationName, varBusinessMessageXMLSchemaDefinition){
	logger.debug(&quot;delegateSynchronousRequest() - START&quot;);
	var	varTargetDetailsCode = varTargetInvocationStrategy.getServiceProviderName();
	var isFailureOverallResponse = false;
	var overallResponseString;
	var generateResponseBean = new Packages.gov.nih.nci.ihub.writer.ncies.common.GenerateResponseBean();
	if (varBusinessMessageXMLSchemaDefinition == undefined){
		varBusinessMessageXMLSchemaDefinition = &quot;&quot;;
	}
	gridInvocationResult = varTargetInvocationStrategy.invokeGridService(false);

	if(gridInvocationResult.isFault()){		
		if(gridInvocationResult.isRetry()){
			var retryAttempt=0;
			var totalRetryAttempts = globalMap.get(&quot;target.grid.service.retry.attempts&quot;);
			for (retryAttempt=0; retryAttempt&lt;totalRetryAttempts; retryAttempt++)
			{
				logger.info(varTargetDetailsCode+&quot; Retry Attempt: &quot;+retryAttempt);
				gridInvocationResult = varTargetInvocationStrategy.invokeGridService(false);
				if(gridInvocationResult.isFault()){
					isFailureOverallResponse = true;
					continue;
				} else {
					break;
				}
			}
		} else {
			isFailureOverallResponse = true;
		}
	}		
	overallResponseString = generateResponseBean.generateResponseFromTargetResponse(varExternalID, 
							varMessageID, generateResponseBean.createOutputDocument(varTargetDetailsCode, varOperationName, varBusinessMessageXMLSchemaDefinition, gridInvocationResult));		
	updateMessageServiceResponseInDB(isFailureOverallResponse, &quot;&quot;, varMessageID, Packages.gov.nih.nci.ihub.util.HubConstants.MESSAGE_STATUS_RESPONSE_RETURNED);
	logger.debug(&quot;delegateSynchronousRequest() - END&quot;);
	return overallResponseString;
}</code>
    <type>FUNCTION</type>
    <scope>2</scope>
  </com.webreach.mirth.model.CodeTemplate>
  <com.webreach.mirth.model.CodeTemplate>
    <id>00908a17-6da4-465c-a4f9-d15e9dbdb063</id>
    <name>delegateTargetRollbackRequest</name>
    <tooltip>Delagates a ROLLBACK request to a single target caGrid service. The target caGrid service must implement the &quot;rollback&quot; operation</tooltip>
    <code>function delegateTargetRollbackRequest(varServiceType, varTargetInvocationStrategyList, varMessageID){
	for(i=0; i&lt;varTargetInvocationStrategyList.size(); i++) {	
		
		varTargetInvocationStrategy = varTargetInvocationStrategyList.get(i);
		var	varTargetDetailsCode = varTargetInvocationStrategy.getServiceProviderName();
		logger.info(&quot;Sending &quot;+ varServiceType +&quot; ROLLBACK to &quot;+varTargetDetailsCode);
		try{	
			var gridInvocationResult = varTargetInvocationStrategy.invokeGridService(true);

		} catch (error) {	
			logger.error(&quot;EXCEPTION OCCURED IN MIRTH DURING &quot;+varTargetDetailsCode+&quot; INVOCATION: &quot;+error);
			insertCompiledTargetResponse(createErrorResponseXML(new Packages.java.lang.Exception(error), varTargetDetailsCode), 
				varTargetDetailsCode, Packages.gov.nih.nci.ihub.util.HubConstants.TARGET_RESPONSE_STATUS_FAULT, varMessageID);
		}
	}
}</code>
    <type>FUNCTION</type>
    <scope>2</scope>
  </com.webreach.mirth.model.CodeTemplate>
  <com.webreach.mirth.model.CodeTemplate>
    <id>75156b39-35c9-4fab-93fc-61dfc4dca96d</id>
    <name>createSuccessResponseXML</name>
    <tooltip>Using the response from caGrid service, creates a successful response XML String  that can be embedded in the overall response returned to the caller</tooltip>
    <code>//By using the varRequestXMLSchemaDefinition, an undefined value is getting set in the aggregated response. As a work around, replacing 
// varRequestXMLSchemaDefinition with an empty string temporarily.
function createSuccessResponseXML(varGridInvocationResult, varTargetDetailCode, varRequestXMLSchemaDefinition){
	var generateResponseBean = new Packages.gov.nih.nci.ihub.writer.ncies.common.GenerateResponseBean();
	var gridInvocationResultDocument = generateResponseBean.createOutputDocument(varTargetDetailCode, new Packages.java.lang.String(&quot;&quot;),
			varRequestXMLSchemaDefinition, varGridInvocationResult);
	var successResponseXML = Packages.gov.nih.nci.ihub.util.IntegrationHubUtil.xmlToString(gridInvocationResultDocument);
	return successResponseXML;
}
</code>
    <type>FUNCTION</type>
    <scope>2</scope>
  </com.webreach.mirth.model.CodeTemplate>
  <com.webreach.mirth.model.CodeTemplate>
    <id>b136e439-7d02-4205-9f7a-3a4015ca33a3</id>
    <name>createErrorResponseXML</name>
    <tooltip>Using the response or exception during caGrid service invocation, creates an error response XML String that can be embedded in the overall response returned to the caller</tooltip>
    <code>function createErrorResponseXML(varException, varTargetDetailCode){
	var generateResponseBean = new Packages.gov.nih.nci.ihub.writer.ncies.common.GenerateResponseBean();
	var gridInvocationResultDocument = generateResponseBean.createErrorDocument(varTargetDetailCode, new Packages.java.lang.String(&quot;&quot;),
			 varException);
	var errorResponseXML = Packages.gov.nih.nci.ihub.util.IntegrationHubUtil.xmlToString(gridInvocationResultDocument);
	return errorResponseXML;
}</code>
    <type>FUNCTION</type>
    <scope>2</scope>
  </com.webreach.mirth.model.CodeTemplate>
  <com.webreach.mirth.model.CodeTemplate>
    <id>6f1f47ee-90a1-4dc5-b129-f17634474fdb</id>
    <name>createErrorResponseNode</name>
    <tooltip>Using the response or exception during caGrid service invocation, creates an error response XML Node that can be embedded in the overall response returned to the caller</tooltip>
    <code>function createErrorResponseNode(varException, varTargetDetailCode){
	var generateResponseBean = new Packages.gov.nih.nci.ihub.writer.ncies.common.GenerateResponseBean();
	var gridInvocationResultDocument = generateResponseBean.createErrorDocument(varTargetDetailCode, new Packages.java.lang.String(&quot;&quot;),
			 varException);	
	return gridInvocationResultDocument;
}</code>
    <type>FUNCTION</type>
    <scope>2</scope>
  </com.webreach.mirth.model.CodeTemplate>
  <com.webreach.mirth.model.CodeTemplate>
    <id>9658ebf3-03fa-4c15-a85f-3833f204e496</id>
    <name>insertCompiledTargetResponse</name>
    <tooltip>Using the compiled target service response, gets the database connection and stores the response and status  in the COMPILED_TARGET_RESPONSE table</tooltip>
    <code>function insertCompiledTargetResponse(varResponseXML, varTargetDetailCode, varTargetResponseStatus, varMessageID){
	logger.info(varTargetDetailCode+ &quot; Response XML: &quot;+varResponseXML);		
	//var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;,&apos;jdbc:postgresql://localhost:5432/mirth&apos;,&apos;mirthadmin&apos;,&apos;changeme&apos;);
	var dbConn = getIHubDatabaseConnection();

	var prepStatement = &quot;INSERT INTO COMPILED_TARGET_RESPONSE (MESSAGE_ID, TARGET_DETAILS, COMPILED_RESPONSE, TARGET_RESPONSE_STATUS, TIME_COMPLETED) VALUES(?,?,?,?,to_timestamp(?, &apos;YYYY-MM-DD HH24:MI:SS&apos;))&quot;;
	var params = new Packages.java.util.ArrayList();
	params.add(varMessageID);
	params.add(varTargetDetailCode);
	params.add(varResponseXML);
	params.add(varTargetResponseStatus);
	params.add(DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;));

	dbConn.executeUpdate(prepStatement, params);
	dbConn.close();	
}</code>
    <type>FUNCTION</type>
    <scope>2</scope>
  </com.webreach.mirth.model.CodeTemplate>
  <com.webreach.mirth.model.CodeTemplate>
    <id>77131a08-e8c3-434e-9dfc-4820dfaf9255</id>
    <name>insertIncomingMessageInDB</name>
    <tooltip>Using the incoming message to iHub, gets the database connection and stores the  message in the MESSAGE table.</tooltip>
    <code>function insertIncomingMessageInDB(varMessageID, varBusinessMessagePayload, varMessageStatus, varSchemaDefinition, varMetadata){	
	var dbConn = getIHubDatabaseConnection();
	var prepStatement = &quot;INSERT INTO MESSAGE (MESSAGE_ID, PAYLOAD, MESSAGE_STATUS, TIME_RECEIVED, SCHEMA_DEFINITION, METADATA) VALUES(?, ?, ?, to_timestamp(?, &apos;YYYY-MM-DD HH24:MI:SS&apos;), ?, ?)&quot;;
	var params = new Packages.java.util.ArrayList();
	params.add(varMessageID);
	params.add(varBusinessMessagePayload);
	params.add(varMessageStatus);
	params.add(DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;));
	params.add(varSchemaDefinition);
	params.add(varMetadata);
	dbConn.executeUpdate(prepStatement, params);
	dbConn.close();	
}</code>
    <type>FUNCTION</type>
    <scope>2</scope>
  </com.webreach.mirth.model.CodeTemplate>
  <com.webreach.mirth.model.CodeTemplate>
    <id>dad96078-0d53-4b2e-aa6e-a46de1e838b4</id>
    <name>getCompiledResponseResultsFromDB</name>
    <tooltip>Retrieves the results from the COMPILED_TARGET_RESPONSE table based on the message_id. Returns the ResultSet object.</tooltip>
    <code>function getCompiledResponseResultsFromDB(varMessageID){	
	var dbConn = getIHubDatabaseConnection();
	var resultSet = dbConn.executeCachedQuery(&quot;SELECT compiled_target_response.compiled_target_response_id AS compiled_target_response_compiled_target_response_id, compiled_target_response.message_id AS compiled_target_response_message_id, compiled_target_response.target_details AS compiled_target_response_target_details, compiled_target_response.compiled_response AS compiled_target_response_compiled_response, compiled_target_response.target_response_status AS compiled_target_response_target_response_status, compiled_target_response.time_completed AS compiled_target_response_time_completed FROM compiled_target_response where message_id=&apos;&quot;+varMessageID+&quot;&apos;&quot;);
	//logger.info(&quot;Compiled Result Set Size: &quot;+resultSet.size());
	dbConn.close();
	return resultSet;
}</code>
    <type>FUNCTION</type>
    <scope>2</scope>
  </com.webreach.mirth.model.CodeTemplate>
  <com.webreach.mirth.model.CodeTemplate>
    <id>4e92d63b-9d45-4e76-839f-74c9326b8032</id>
    <name>updateMessageServiceResponseInDB</name>
    <tooltip>Updates the MESSAGE table with the overall response string that will be returned to the caller. </tooltip>
    <code>// This function is called by: aggregateBroadcastResponse().
function updateMessageServiceResponseInDB(varIsFailureOverallResponse, varOverallResponseString, varMessageID, varMessageStatus){
	var overallResponseStatus = Packages.gov.nih.nci.ihub.util.HubConstants.OVERALL_RESPONSE_STATUS_SUCCESS;
	if(varIsFailureOverallResponse){
		overallResponseStatus = Packages.gov.nih.nci.ihub.util.HubConstants.OVERALL_RESPONSE_STATUS_FAILURE;
	}
	//var overallResponseString = Packages.gov.nih.nci.ihub.util.IntegrationHubUtil.xmlToString(varOverallResponse);
	//logger.info(&quot;Overall Response String: &quot;+varOverallResponseString);
	var dbConn = getIHubDatabaseConnection();
	var prepStatement = &quot;UPDATE MESSAGE SET MESSAGE_STATUS=?, OVERALL_RESPONSE_DATA=?, OVERALL_RESPONSE_STATUS=?, TIME_COMPLETED=to_timestamp(?, &apos;YYYY-MM-DD HH24:MI:SS&apos;) WHERE MESSAGE_ID=?&quot;;
	var params = new Packages.java.util.ArrayList();
	params.add(varMessageStatus);
	params.add(varOverallResponseString);
	params.add(overallResponseStatus);
	params.add(DateUtil.getCurrentDate(&quot;yyyy-MM-dd HH:mm:ss&quot;));
	params.add(varMessageID);
	dbConn.executeUpdate(prepStatement, params);
	dbConn.close();		
}</code>
    <type>FUNCTION</type>
    <scope>2</scope>
  </com.webreach.mirth.model.CodeTemplate>
</list>