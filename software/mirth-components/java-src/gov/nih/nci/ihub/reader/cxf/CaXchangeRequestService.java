/*
 * Copyright Ekagra and SemanticBits, LLC
 * 
 * Distributed under the OSI-approved BSD 3-Clause License.
 * See http://ncip.github.com/ihub/LICENSE.txt for details.
 */
package gov.nih.nci.ihub.reader.cxf;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 2.1.2
 * Mon Apr 25 16:26:31 EDT 2011
 * Generated source version: 2.1.2
 *
 */


@WebServiceClient(name = "CaXchangeRequestService",
                  wsdlLocation = "file:caXchangeRequest.wsdl",
                  targetNamespace = "http://caXchange.nci.nih.gov/caxchangerequest")
public class CaXchangeRequestService extends Service {

    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("http://caXchange.nci.nih.gov/caxchangerequest", "CaXchangeRequestService");
    public final static QName Soap = new QName("http://caXchange.nci.nih.gov/caxchangerequest", "soap");
    static {
        URL url = null;
        try {
            url = new URL("file:caXchangeRequest.wsdl");
        } catch (MalformedURLException e) {
            System.err.println("Can not initialize the default wsdl from file:caXchangeRequest.wsdl");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    public CaXchangeRequestService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public CaXchangeRequestService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CaXchangeRequestService() {
        super(WSDL_LOCATION, SERVICE);
    }

    /**
     *
     * @return
     *     returns CaXchangeRequestPortType
     */
    @WebEndpoint(name = "soap")
    public CaXchangeRequestPortType getSoap() {
        return super.getPort(Soap, CaXchangeRequestPortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CaXchangeRequestPortType

    @WebEndpoint(name = "soap")
    public CaXchangeRequestPortType getSoap(WebServiceFeature... features) {
        return super.getPort(Soap, CaXchangeRequestPortType.class, features);
    }
     */
}
