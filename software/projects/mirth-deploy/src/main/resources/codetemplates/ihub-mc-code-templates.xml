<list>
<!-- cacis templates -start -->

  <codeTemplate>
    <id>7608a1c9-3235-41d1-a057-718b74524f0d</id>
    <name>xsdValidateSACaCISRequest template</name>
    <tooltip>template function for xsdValidateSACaCISRequest</tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function xsdValidateSACaCISRequest(reqMsg) {

	var commonsCtx = globalMap.get(&apos;commonsctx&apos;);
	try{
		var saXsdValidator = commonsCtx.getBean(&quot;cacisRequestSASchemaValidator&quot;);
		saXsdValidator.validate(reqMsg);
	}catch(err) {
		return err.message;
	}
    return null;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
    <version>2.1.1.5490</version>
  </codeTemplate>
  <codeTemplate>
    <id>8f2dec07-a0e3-423e-ae18-bc0f9fc6e8a3</id>
    <name>xsdValidateSASourceData template</name>
    <tooltip>template function for xsdValidateSASourceData</tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function xsdValidateSASourceData(srcData) {

	var commonsCtx = globalMap.get(&apos;commonsctx&apos;);
	try{
		var srcdataXsdValidator = commonsCtx.getBean(&quot;cacisRequestSASourceDataSchemaValidator&quot;);
		srcdataXsdValidator.validate(srcData);
	}catch(err) {
		return err.message;
	}
    return null;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
    <version>2.1.1.5490</version>
  </codeTemplate>
  <codeTemplate>
    <id>eb209e50-1c07-4b5e-b7ff-af43c9dd663d</id>
    <name>schematronValidateSASourceData template</name>
    <tooltip>template for schematronValidateSASourceData</tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function schematronValidateSASourceData(srcData) {

	var commonsCtx = globalMap.get(&apos;commonsctx&apos;);
	try{
		var saSrcDataSchValidator = commonsCtx.getBean(&quot;cacisRequestSASourceDataSchematronValidator&quot;);
		saSrcDataSchValidator.validate(srcData);
	}catch(err) {
		return err.message;
	}
    return null;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
    <version>2.1.1.5490</version>
  </codeTemplate>
  <codeTemplate>
    <id>f472369e-bca8-471f-af51-e0c544f7276c</id>
    <name>xsdValidateCanonical template</name>
    <tooltip>template function for xsdValidateCanonical</tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function xsdValidateCanonical(reqMsg) {

	var commonsCtx = globalMap.get(&apos;commonsctx&apos;);
	try{
		var cdfXsdValidator = commonsCtx.getBean(&quot;canonicalSchemaValidator&quot;);
		cdfXsdValidator.validate(reqMsg);
	}catch(err) {
		return err.message;
	}
    return null;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
    <version>2.1.1.5490</version>
  </codeTemplate>
  <codeTemplate>
    <id>b963a6e8-d246-4c0f-9785-ff618c0e40da</id>
    <name>formatErrorStr</name>
    <tooltip>template function that formats the error message string</tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function formatErrorStr(errStr) {
	return &apos;CaCISError:&apos; + errStr;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
    <version>2.1.1.5490</version>
  </codeTemplate>
  <codeTemplate>
    <id>211f0800-8131-46d7-9404-1f5334b0930a</id>
    <name>handleErrorStr</name>
    <tooltip>template function to handle error strings</tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function handleErrorStr(errStr) {
	var existErr = responseMap.get(&apos;error&apos;);
	existErr = (existErr==null)?&apos;&apos;:existErr;
	existErr = Packages.org.apache.commons.lang.StringUtils.remove(existErr, &apos;SUCCESS:&apos;);
	existErr = existErr + &apos;CaCISError:&apos; + errStr + &apos;!&apos;;
	responseMap.put(&apos;error&apos;, existErr);
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
    <version>2.1.1.5490</version>
  </codeTemplate>
  <codeTemplate>
    <id>a82a8537-6c0a-423c-ac2a-c1d94d3079a5</id>
    <name>handleResponse</name>
    <tooltip>template function that handles destinations responses and errors, used in the handleResponse destination</tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function handleResponse(resConnectorNm, destArr) {

	var err = responseMap.get(&apos;error&apos;);

	if(err != null ){
		responseMap.put(resConnectorNm, err);
	} else {
        var res = &apos;&apos;;
		if(destArr != null &amp;&amp; destArr.length &gt; 0) {
			for (i=0;i&lt;=destArr.length;i++) {
				var currRes = responseMap.get(destArr[i]);	
				if(currRes != null) {			
					res = res + currRes.toString() + &apos;!&apos;;
				}
			}//end of for
		} else {
			res = &apos;Successfully processed!&apos;;
		}
		if(Packages.org.apache.commons.lang.StringUtils.contains(res, &apos;CaCISError&apos;)){
			res = Packages.org.apache.commons.lang.StringUtils.remove(res, &apos;SUCCESS:&apos;);
			res = Packages.org.apache.commons.lang.StringUtils.remove(res, &apos;!&apos;);
			res = Packages.org.apache.commons.lang.StringUtils.replace(res, &apos;  &apos;, &apos; &apos;);
		}
		responseMap.put(resConnectorNm, res);
	}
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
    <version>2.1.1.5490</version>
  </codeTemplate>
  <codeTemplate>
    <id>55060165-2f4f-4b62-a9b1-83b25cae5fa2</id>
    <name>drTransformDocument template</name>
    <tooltip>template function for drTransformDocument</tooltip>
    <code>function drTransformDocument(documentToTransform, transformerName) {
	var transformer = globalChannelMap.get(transformerName);
	var os;
	var is;
	try {
		os = new Packages.java.io.ByteArrayOutputStream();
		is = new Packages.java.io.ByteArrayInputStream(new Packages.java.lang.String(documentToTransform).getBytes());

		transformer.transform(null, is, os);

		transformedDocument = new Packages.java.lang.String(os.toByteArray());

	} finally {
		if (is != null) {
			is.close();
		}
		if (os != null) {
			os.close();
		}
	}
	return transformedDocument;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
    <version>2.1.1.5490</version>
  </codeTemplate>
  <codeTemplate>
    <id>e4767ac5-97df-4d33-a90e-fb7c06ebf759</id>
    <name>filterOnError</name>
    <tooltip>template function to filter based on availability of error</tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function filterOnError() {
	var err = responseMap.get(&apos;error&apos;);
	
	//return true to accept the message and false to filter it
	if(err == null) {
		return true;
	} else {
		return false;
	}
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
    <version>2.1.1.5490</version>
  </codeTemplate>
  <codeTemplate>
    <id>5c43f15d-ea72-4396-a9d9-1aa1692b63d3</id>
    <name>schematronValidateCanonical template</name>
    <tooltip>template function for schematron validate canonical Cacis Request</tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function schematronValidateCanonicalCR(cacisReq) {
	var commonsCtx = globalMap.get(&apos;commonsctx&apos;);
	try{
		var canonicalCRSchValidator = commonsCtx.getBean(&quot;cacisRequestCanonicalSchematronValidator&quot;);
		canonicalCRSchValidator.validate(cacisReq);
	}catch(err) {
		return err.message;
	}
    return null;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
    <version>2.1.1.5490</version>
  </codeTemplate>

<!-- cacis templates - end -->  
  <codeTemplate>
    <id>54477467-b3ca-4506-9191-64620cfad8e8</id>
    <name>transformMessage</name>
    <tooltip>xsl transforms based on the transformer name</tooltip>
    <code>function transformMessage(messageToTransform, transformerName) {
	var transformer = globalMap.get(transformerName);
	logger.info(transformerName + &quot;=&quot; + transformer);
	var os;
	var is;
	try {
		os = new Packages.java.io.ByteArrayOutputStream();
		is = new Packages.java.io.ByteArrayInputStream(new Packages.java.lang.String(messageToTransform).getBytes());

		transformer.transform(null, is, os);

		transformedDocument = new Packages.java.lang.String(os.toByteArray());

	} finally {
		if (is != null) {
			is.close();
		}
		if (os != null) {
			os.close();
		}
	}
	return transformedDocument;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
    <version>2.1.1.5490</version>
  </codeTemplate>
  <codeTemplate>
    <id>7607950a-c0f2-4454-8cf2-a85f8be6e191</id>
    <name>persistIHubMessageInDB</name>
    <tooltip>persists IHubMessageInDB</tooltip>
    <code>function persistIHubMessageInDB(requestMsg) {
	var iHubMessageDao = globalMap.get(&quot;iHubMessageDao&quot;);

	return iHubMessageDao.saveMessage(requestMsg);
	
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
    <version>2.1.1.5490</version>
  </codeTemplate>
  <codeTemplate>
    <id>1dc57a01-ef5d-42f3-bbf5-567626e25460</id>
    <name>convertIntegrationExceptionToCaCISError</name>
    <tooltip>convert IntegrationException To CaCISError xml string</tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function convertIntegrationExceptionToCaCISError(intgExcptn) {

	var cacisError =  &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot; standalone=\&quot;yes\&quot;?&gt;&quot; +
		&quot;&lt;caCISFault xmlns=\&quot;http://cacis.nci.nih.gov\&quot;&gt;&quot; +
		&quot;&lt;caCISError errorType=\&quot;&quot;+ intgExcptn.getErrorType().name() + &quot;\&quot; errorCode=\&quot;&quot; + intgExcptn.getErrorCode() + &quot;\&quot;&quot; +
		&quot; errorMessage=\&quot;&quot; + intgExcptn.getMessage() + &quot;\&quot;&quot; + &quot; detail=\&quot;&quot; + intgExcptn.stackTraceAsString()+ &quot;\&quot;/&gt; &lt;/caCISFault&gt;&quot;;

	return cacisError;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
    <version>2.1.1.5490</version>
  </codeTemplate>
  <codeTemplate>
    <id>97d7c36e-e4bf-4a21-a369-fd8127af17f0</id>
    <name>convertIntgExceptionToIHubResponse</name>
    <tooltip>convert Exception To IHubResponse</tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function convertIntgExceptionToIHubResponse(intgExcptn) {	
	var iHubResponse = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot; standalone=\&quot;yes\&quot;?&gt;&quot;
			+ &quot;&lt;caXchangeError xmlns=\&quot;http://caXchange.nci.nih.gov/messaging\&quot;&gt;&quot;
			+ &quot;&lt;errorCode&gt;&quot;+ intgExcptn.getErrorCode() +&quot;&lt;/errorCode&gt;&quot;
			+ &quot;&lt;errorDescription&gt;&quot; + intgExcptn.getMessage() + &quot;&lt;/errorDescription&gt;&quot;
			+ &quot;&lt;/caXchangeError&gt;&quot;;
	return iHubResponse;
}</code>
    <type>FUNCTION</type>
    <scope>3</scope>
    <version>2.1.1.5490</version>
  </codeTemplate>
  <codeTemplate>
    <id>ad77a029-e0f0-4a62-86c5-c25ac359a0d8</id>
    <name>convertIntegrationExceptionToMsgBCError</name>
    <tooltip>converts IntegrationException To MsgBC Error</tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function convertIntegrationExceptionToMsgBCError(intgExcptn) {
	var cacisError = &quot;&lt;MessageBroadcasterError errorType=\&quot;&quot;+ intgExcptn.getErrorType().name() + &quot;\&quot;&quot;
					+ &quot; errorCode=\&quot;&quot; + intgExcptn.getErrorCode() + &quot;\&quot;&quot;
					+ &quot; errorMessage=\&quot;&quot; + intgExcptn.getMessage() + &quot;\&quot;&quot;
					+ &quot; detail=\&quot;&quot; + intgExcptn.stackTraceAsString()+ &quot;\&quot;/&gt; &quot;;
	return cacisError;
}</code>
    <type>FUNCTION</type>
    <scope>0</scope>
    <version>2.1.1.5490</version>
  </codeTemplate>
  <codeTemplate>
    <id>67c23225-4310-4698-8704-0e60090ea8f0</id>
    <name>convertMsgBCErrorToCaCISError</name>
    <tooltip>converts MsgBCError To CaCISError</tooltip>
    <code>// modify function_name and parameters as you wish.
// one function per template is recommended. i.e.) create a new code template for each new function.
function convertMsgBCErrorToCaCISError(msgBCErrorStr) {
	var cacisError = msgBCErrorStr.replace(&quot;MessageBroadcasterError&quot;, &quot;caCISError&quot;);

	cacisError = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot; standalone=\&quot;yes\&quot;?&gt;&quot; +
		&quot;&lt;caCISFault xmlns=\&quot;http://cacis.nci.nih.gov\&quot;&gt;&quot; + cacisError + &quot;&lt;/caCISFault&gt;&quot;;

	return cacisError;
}</code>
    <type>FUNCTION</type>
    <scope>3</scope>
    <version>2.1.1.5490</version>
  </codeTemplate>
</list>