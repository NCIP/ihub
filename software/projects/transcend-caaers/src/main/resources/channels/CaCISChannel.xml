<channel>
  <id>a970cdea-9aa0-4d10-97f5-afe305b694d3</id>
  <name>CaCISChannel</name>
  <description></description>
  <enabled>true</enabled>
  <version>2.1.1.5490</version>
  <lastModified>
    <time>1332939466607</time>
    <timezone>America/New_York</timezone>
  </lastModified>
  <revision>44</revision>
  <sourceConnector>
    <name>sourceConnector</name>
    <properties>
      <property name="DataType">Web Service Listener</property>
      <property name="host">0.0.0.0</property>
      <property name="port">12085</property>
      <property name="receiverClassName">com.mirth.connect.connectors.ws.DefaultAcceptMessage</property>
      <property name="receiverPasswords">&lt;list/&gt;</property>
      <property name="receiverResponseValue">ResponseWriter</property>
      <property name="receiverServiceName">Mirth</property>
      <property name="receiverUsernames">&lt;list/&gt;</property>
    </properties>
    <transformer>
      <steps/>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundProtocol>XML</inboundProtocol>
      <outboundProtocol>XML</outboundProtocol>
      <inboundProperties>
        <property name="stripNamespaces">false</property>
      </inboundProperties>
      <outboundProperties>
        <property name="stripNamespaces">false</property>
      </outboundProperties>
    </transformer>
    <filter>
      <rules/>
    </filter>
    <transportName>Web Service Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <version>2.1.1.5490</version>
  </sourceConnector>
  <destinationConnectors>
    <connector>
      <name>RegistrationTransformationConnector</name>
      <properties>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
        <property name="script">//supposed to do RegistrationTransformation
channelMap.put(&quot;msgForBroadcaster&quot;, $(&apos;regnMsg&apos;) );
return;</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>RegistrationTransformationTransformer</name>
            <script>var regnMsg = null;
try {
	var regnMsgStr = transformMessage(msg, &quot;crToRegnMsgTransformer&quot;);

	regnMsg = new XML(regnMsgStr);

	channelMap.put(&apos;regnMsg&apos;, regnMsg);

} catch(err) {
	channelMap.put(&apos;IS_IHUB_PROCESSING_ERROR&apos;, true);
	channelMap.put(&apos;CACIS_ERROR&apos;, &quot;Error transforming to Registration broadcaster message!&quot; + err.message);
}

return;</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>var regnMsg = null;
try {
	var regnMsgStr = transformMessage(msg, &quot;crToRegnMsgTransformer&quot;);

	regnMsg = new XML(regnMsgStr);

	channelMap.put(&apos;regnMsg&apos;, regnMsg);

} catch(err) {
	channelMap.put(&apos;IS_IHUB_PROCESSING_ERROR&apos;, true);
	channelMap.put(&apos;CACIS_ERROR&apos;, &quot;Error transforming to Registration broadcaster message!&quot; + err.message);
}

return;</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">true</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;msg[&apos;cacis:routingInstructions&apos;][&apos;cacis:exchangeDocument&apos;][&apos;@exchangeFormat&apos;].toString()&quot; equals globalMap.get(&apos;REGN&apos;)</name>
            <data class="map">
              <entry>
                <string>Values</string>
                <list>
                  <string>globalMap.get(&apos;REGN&apos;)</string>
                </list>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>Field</string>
                <string>msg[&apos;cacis:routingInstructions&apos;][&apos;cacis:exchangeDocument&apos;][&apos;@exchangeFormat&apos;].toString()</string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if(msg[&apos;cacis:routingInstructions&apos;][&apos;cacis:exchangeDocument&apos;][&apos;@exchangeFormat&apos;].toString() == globalMap.get(&apos;REGN&apos;))
{
return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>AdverseEventTransformationConnector</name>
      <properties>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
        <property name="script">//supposed to handle AE Transformation
channelMap.put(&quot;msgForBroadcaster&quot;, $(&apos;aeMsg&apos;) );
return;</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>AdverseEventTransformationTransformer</name>
            <script>var aeMsg = null;
try {
	var aeMsgStr = transformMessage(msg, &quot;crToAeMsgTransformer&quot;);

	aeMsg = new XML(aeMsgStr);

	channelMap.put(&apos;aeMsg&apos;, aeMsg);

} catch(err) {
	channelMap.put(&apos;IS_IHUB_PROCESSING_ERROR&apos;, true);
	channelMap.put(&apos;CACIS_ERROR&apos;, &quot;Error transforming to Adverse Event broadcaster message!&quot; + err.message);
}

return;</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>var aeMsg = null;
try {
	var aeMsgStr = transformMessage(msg, &quot;crToAeMsgTransformer&quot;);

	aeMsg = new XML(aeMsgStr);

	channelMap.put(&apos;aeMsg&apos;, aeMsg);

} catch(err) {
	channelMap.put(&apos;IS_IHUB_PROCESSING_ERROR&apos;, true);
	channelMap.put(&apos;CACIS_ERROR&apos;, &quot;Error transforming to Adverse Event broadcaster message!&quot; + err.message);
}

return;</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">true</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;msg[&apos;cacis:routingInstructions&apos;][&apos;cacis:exchangeDocument&apos;][&apos;@exchangeFormat&apos;].toString()&quot; equals globalMap.get(&apos;AE&apos;)</name>
            <data class="map">
              <entry>
                <string>Values</string>
                <list>
                  <string>globalMap.get(&apos;AE&apos;)</string>
                </list>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>Field</string>
                <string>msg[&apos;cacis:routingInstructions&apos;][&apos;cacis:exchangeDocument&apos;][&apos;@exchangeFormat&apos;].toString()</string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if(msg[&apos;cacis:routingInstructions&apos;][&apos;cacis:exchangeDocument&apos;][&apos;@exchangeFormat&apos;].toString() == globalMap.get(&apos;AE&apos;))
{
return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>MessageBroadcasterChannelConnector</name>
      <properties>
        <property name="DataType">Channel Writer</property>
        <property name="host">caa43737-c755-4a8e-bba7-ef610c9b8f2d</property>
        <property name="synchronised">1</property>
        <property name="template">${msgForBroadcaster}</property>
      </properties>
      <transformer>
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;msg[&apos;cacis:routingInstructions&apos;][&apos;cacis:exchangeDocument&apos;][&apos;@exchangeFormat&apos;].toString()&quot; equals globalMap.get(&apos;AE&apos;) or globalMap.get(&apos;REGN&apos;)</name>
            <data class="map">
              <entry>
                <string>Values</string>
                <list>
                  <string>globalMap.get(&apos;AE&apos;)</string>
                  <string>globalMap.get(&apos;REGN&apos;)</string>
                </list>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>Field</string>
                <string>msg[&apos;cacis:routingInstructions&apos;][&apos;cacis:exchangeDocument&apos;][&apos;@exchangeFormat&apos;].toString()</string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if(msg[&apos;cacis:routingInstructions&apos;][&apos;cacis:exchangeDocument&apos;][&apos;@exchangeFormat&apos;].toString() == globalMap.get(&apos;AE&apos;) || msg[&apos;cacis:routingInstructions&apos;][&apos;cacis:exchangeDocument&apos;][&apos;@exchangeFormat&apos;].toString() == globalMap.get(&apos;REGN&apos;))
{
return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>ResponseWriterConnector</name>
      <properties>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
        <property name="script">//handle all responses and create appropriate response for this channel

var msgTyp = msg[&apos;cacis:routingInstructions&apos;][&apos;cacis:exchangeDocument&apos;][&apos;@exchangeFormat&apos;].toString();
if(	msgTyp != globalMap.get(&apos;AE&apos;) 
	&amp;&amp; msgTyp != globalMap.get(&apos;REGN&apos;)
	) {
	responseMap.put(&quot;ResponseWriter&quot;, &quot;Unable to process messages other than AE and Registration!&quot;);
}

var iHubError = channelMap.get(&apos;IS_IHUB_PROCESSING_ERROR&apos;);
if(iHubError) {
	var cacisError = channelMap.get(&apos;CACIS_ERROR&apos;);

	var cacisResponse = &quot;&lt;caCISError errorType=\&quot;VALIDATION\&quot; errorCode=\&quot;1001\&quot; &quot;
				+ &quot; errorMessage=\&quot;&quot; + cacisError + &quot; detail=\&quot;\&quot;/&gt; &quot;;

	responseMap.put(&quot;ResponseWriterConnector&quot;, cacisResponse);

	return;
}

responseMap.put(&quot;ResponseWriter&quot;, responseMap.get(&apos;MessageBroadcasterChannelConnector&apos;));
return;</property>
      </properties>
      <transformer>
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">true</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
  </destinationConnectors>
  <properties>
    <property name="clearGlobalChannelMap">true</property>
    <property name="dont_store_filtered">false</property>
    <property name="encryptData">false</property>
    <property name="error_messages_only">false</property>
    <property name="initialState">started</property>
    <property name="max_message_age">-1</property>
    <property name="store_messages">true</property>
    <property name="synchronous">true</property>
    <property name="transactional">false</property>
  </properties>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

var commonAppCtx = globalMap.get(&quot;commonsctx&quot;);

if(commonAppCtx == null) {
  	commonAppCtx = new Packages.org.springframework.context.support.ClassPathXmlApplicationContext(&quot;classpath*:applicationContext-common.xml&quot;);	
	globalMap.put(&quot;commonAppCtx&quot;, commonAppCtx);
}

var baseXSLClasspath=&quot;C:/Users/sb-admin-cp/.integration/ihub/xsl/&quot;;

var crToRegnMsgTransformer = commonAppCtx.getBean(&quot;xsltTransformer&quot;);
crToMsgBrdCstMsgTransformer.initTransformer(&quot;CaCISRequest-to-MsgBroadcasterInboundMsg.xsl&quot;, baseXSLClasspath);

globalMap.put(&quot;crToRegnMsgTransformer&quot;, crToMsgBrdCstMsgTransformer);

var crToAeMsgTransformer = commonAppCtx.getBean(&quot;xsltTransformer&quot;);
crToAeMsgTransformer.initTransformer(&quot;CaCISRequest-to-MsgBroadcasterInboundMsg.xsl&quot;, baseXSLClasspath);

globalMap.put(&quot;crToAeMsgTransformer&quot;, crToAeMsgTransformer);

return;</deployScript>
  <shutdownScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</shutdownScript>
</channel>