package gov.nih.nci.cacis.sa.transcend;

import java.io.StringWriter;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.mirth.connect.connectors.ws.AcceptMessage;
import com.mirth.connect.connectors.ws.WebServiceMessageReceiver;

/**
 * This class was generated by Apache CXF 2.4.1
 * 2012-04-11T16:58:55.116-04:00
 * Generated source version: 2.4.1
 * 
 */

@javax.jws.WebService(
                      serviceName = "TranscendSemanticAdapter",
                      portName = "AcceptSource_Port_Soap11",
                      targetNamespace = "http://cacis.nci.nih.gov",
                      endpointInterface = "gov.nih.nci.cacis.sa.transcend.AcceptSourcePortType")
                      
public class TranscendSemanticAdapter extends AcceptMessage {

    private static final Logger LOG = LoggerFactory.getLogger(TranscendSemanticAdapter.class.getName());
    
//    private String customLibDir = "./custom-lib";
    private String customLibDir = "custom-lib/";
    
    public TranscendSemanticAdapter(WebServiceMessageReceiver webServiceMessageReceiver) {
        super(webServiceMessageReceiver);
    }

    
    /**
     * AcceptSource operation accepts data from Clinical Source system and sends it to Mirth Connect for processing
     * 
     * @param parameter caCISRequest
     * @return CaCISResponse
     * @throws AcceptSourceFault Web Service Fault
     */
    @WebResult(name = "caCISResponse", targetNamespace = "http://cacis.nci.nih.gov", partName = "parameter")
    @WebMethod
    public CaCISResponse acceptSource(
            @WebParam(partName = "parameter", name = "caCISRequest", 
                    targetNamespace = "http://cacis.nci.nih.gov") CaCISRequest parameter)
            throws AcceptSourceFault {
    	
        LOG.info("Executing operation acceptSource");
        System.out.println(parameter);
        
        gov.nih.nci.cacis.sa.transcend.CaCISResponse response = new CaCISResponse();
        
        try {
        	String reqstr = getCaCISRequestxml(parameter);
            
        	 if (StringUtils.isEmpty(reqstr)) {
                 throw new AcceptSourceFault("Error marshalling CaCISRequest!");
             }

             String mcResponse = webServiceMessageReceiver.processData(reqstr);

             LOG.info("MC RESPONSE:" + mcResponse);
             
             if (mcResponse != null
                     && (mcResponse.indexOf("Error") > -1 || mcResponse.indexOf("Exception") > -1
                             || mcResponse.indexOf("ERROR") > -1 || mcResponse.indexOf("error") > -1)) {
                 mcResponse = StringUtils.remove(mcResponse, "SUCCESS:");
                 throw new AcceptSourceFault("Error processing Data from Source System: " + mcResponse);
             }
             response.setStatus(ResponseStatusType.SUCCESS);
            
            return response;
        } catch (java.lang.Exception ex) {
            LOG.error("Error accepting CaCISRequest", ex);
            throw new AcceptSourceFault("Error accepting Data from Source System!" + ex.getMessage(), ex);
        }
    }
    
    
    private String getCaCISRequestxml(final CaCISRequest parameter) {
        try {           
        	StringWriter sw = new StringWriter();        	
        	getMarshaller().marshal( parameter,sw);                 	
        	LOG.info("Inside TranscendSemanticAdapter... RequestXML is : " + sw.toString());
        	return sw.toString(); 
        } catch (Exception ex) {
        	LOG.error("Error marshalling CaXchangeRequest!", ex);                	 
            return null;
        } 

    }
    
    private Marshaller getMarshaller() throws JAXBException {		
		JAXBContext jc = JAXBContext.newInstance(CaCISRequest.class);		
		return jc.createMarshaller();		
	}
    

}
