package gov.nih.nci.cacis.sa.transcend;

import gov.nih.nci.integration.exception.IntegrationError;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.transform.stream.StreamSource;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.mirth.connect.connectors.ws.AcceptMessage;
import com.mirth.connect.connectors.ws.WebServiceMessageReceiver;

/**
 * This class was generated by Apache CXF 2.4.1
 * 2012-04-11T16:58:55.116-04:00
 * Generated source version: 2.4.1
 * 
 */

@javax.jws.WebService(
                      serviceName = "TranscendSemanticAdapter",
                      portName = "AcceptSource_Port_Soap11",
                      targetNamespace = "http://cacis.nci.nih.gov",
                      endpointInterface = "gov.nih.nci.cacis.sa.transcend.AcceptSourcePortType")
                      
public class TranscendSemanticAdapter extends AcceptMessage {

    private static final Logger LOG = LoggerFactory.getLogger(TranscendSemanticAdapter.class.getName());
    
    private String customLibDir = "custom-lib/";
    
    private JAXBContext jc = null; 
    
    public TranscendSemanticAdapter(WebServiceMessageReceiver webServiceMessageReceiver) {
        super(webServiceMessageReceiver);
    }

    
    /**
     * AcceptSource operation accepts data from Clinical Source system and sends it to Mirth Connect for processing
     * 
     * @param parameter caCISRequest
     * @return CaCISResponse
     * @throws AcceptSourceFault Web Service Fault
     */
    @WebResult(name = "caCISResponse", targetNamespace = "http://cacis.nci.nih.gov", partName = "parameter")
    @WebMethod
    public CaCISResponse acceptSource(
            @WebParam(partName = "parameter", name = "caCISRequest", 
                    targetNamespace = "http://cacis.nci.nih.gov") CaCISRequest parameter)
            throws AcceptSourceFault {
    	
        LOG.info("Executing operation acceptSource");
        System.out.println(parameter);
        
        gov.nih.nci.cacis.sa.transcend.CaCISResponse response = new CaCISResponse();
        
        try {
        	String reqstr = getCaCISRequestxml(parameter);
            
        	 if (StringUtils.isEmpty(reqstr)) {
                 throw new AcceptSourceFault("Error marshalling CaCISRequest!");
             }

             String mcResponse = webServiceMessageReceiver.processData(reqstr);

             LOG.info("MC RESPONSE:" + mcResponse);
             
             if (mcResponse != null
                     && (mcResponse.indexOf("Error") > -1 || mcResponse.indexOf("Exception") > -1
                             || mcResponse.indexOf("ERROR") > -1 || mcResponse.indexOf("error") > -1)) {
                 mcResponse = StringUtils.remove(mcResponse, "SUCCESS:");
                 mcResponse = StringUtils.remove(mcResponse, "FAILURE:");
                 AcceptSourceFault fault = 
                	 new AcceptSourceFault("Error processing Data from Source System", getCaCISFaultFromXml(mcResponse));                 
                 throw fault;
             }
             response.setStatus(ResponseStatusType.SUCCESS);
            
            return response;
        } catch (java.lang.Exception ex) {
        	if(ex instanceof AcceptSourceFault) {
        		throw (AcceptSourceFault)ex;
        	}
        	CaCISFault cf = new CaCISFault();
    		CaCISError ce = new CaCISError();
    		IntegrationError ie = IntegrationError._1000;
    		ce.setErrorCode(String.valueOf(ie.getErrorCode()));
    		ce.setErrorMessage(ie.getMessage((Object)null));
    		ce.setErrorType(ErrorType.TRANSMISSION);
    		ce.setDetail(stackTraceAsString(ex));
    		cf.getCaCISError().add(ce);
        	AcceptSourceFault fault = 
        		new AcceptSourceFault("Error accepting Data from Source System!" + ex.getMessage(), ex);
        	throw fault;
        }
    }
    
    
    private String getCaCISRequestxml(final CaCISRequest parameter) {
        try {           
        	StringWriter sw = new StringWriter();        	
        	getMarshaller().marshal( parameter,sw);  
        	return sw.toString(); 
        } catch (Exception ex) {
        	LOG.error("Error marshalling CaCISRequest!", ex);                	 
            return null;
        } 

    }
    
    private CaCISFault getCaCISFaultFromXml(String faultXML) throws JAXBException {
		StreamSource ss = new StreamSource(new StringReader(faultXML));
		return ((JAXBElement<CaCISFault>)getUnmarshaller().unmarshal(ss, CaCISFault.class)).getValue();
	}
    
    private Marshaller getMarshaller() throws JAXBException {	
    	if(jc == null) {
    		jc = JAXBContext.newInstance(CaCISRequest.class);
    	}
		return jc.createMarshaller();		
	}
    
    private Unmarshaller getUnmarshaller() throws JAXBException {		
    	if(jc == null) {
    		jc = JAXBContext.newInstance(CaCISRequest.class);
    	}		
		return jc.createUnmarshaller();		
	}
    
    private String stackTraceAsString(Exception e) {
		String stackTraceStr = e.getMessage();
		StringWriter sw;
		try {
			sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
			stackTraceStr = sw.toString();
			pw.close();
			sw.close();
		} catch (IOException ie) {
			// DO Nothing
		}
		return stackTraceStr;
	}
    

}
