<channel>
  <id>a970cdea-9aa0-4d10-97f5-afe305b694d3</id>
  <name>CaCISChannel</name>
  <description></description>
  <enabled>true</enabled>
  <version>2.1.1.5490</version>
  <lastModified>
    <time>1334698994832</time>
    <timezone>America/New_York</timezone>
  </lastModified>
  <revision>3</revision>
  <sourceConnector>
    <name>sourceConnector</name>
    <properties>
      <property name="DataType">Web Service Listener</property>
      <property name="host">0.0.0.0</property>
      <property name="port">12085</property>
      <property name="receiverClassName">gov.nih.nci.cacis.sa.transcend.TranscendSemanticAdapter</property>
      <property name="receiverPasswords">&lt;list/&gt;</property>
      <property name="receiverResponseValue">ResponseWriterConnector</property>
      <property name="receiverServiceName">TranscendSemanticAdapter</property>
      <property name="receiverUsernames">&lt;list/&gt;</property>
    </properties>
    <transformer>
      <steps>
        <step>
          <sequenceNumber>0</sequenceNumber>
          <name>extractCaxchangeMsg</name>
          <script>default xml namespace=&apos;http://cacis.nci.nih.gov&apos;;

var srcDt = msg[&apos;sourceData&apos;];

default xml namespace = &apos;http://caXchange.nci.nih.gov/caxchangerequest&apos;;

var caxchangeMsg = srcDt[&apos;caxchangerequest&apos;];

default xml namespace = &apos;http://caXchange.nci.nih.gov/messaging&apos;;

var msgTyp = caxchangeMsg[&apos;metadata&apos;][&apos;operationName&apos;].toString();

logger.info(&apos;extracted msgtyp = &apos;+ msgTyp.toString());

channelMap.put(&apos;caxchangeMsg&apos;, caxchangeMsg);
channelMap.put(&apos;msgTyp&apos;, msgTyp.toString());</script>
          <type>JavaScript</type>
          <data class="map">
            <entry>
              <string>Script</string>
              <string>default xml namespace=&apos;http://cacis.nci.nih.gov&apos;;

var srcDt = msg[&apos;sourceData&apos;];

default xml namespace = &apos;http://caXchange.nci.nih.gov/caxchangerequest&apos;;

var caxchangeMsg = srcDt[&apos;caxchangerequest&apos;];

default xml namespace = &apos;http://caXchange.nci.nih.gov/messaging&apos;;

var msgTyp = caxchangeMsg[&apos;metadata&apos;][&apos;operationName&apos;].toString();

logger.info(&apos;extracted msgtyp = &apos;+ msgTyp.toString());

channelMap.put(&apos;caxchangeMsg&apos;, caxchangeMsg);
channelMap.put(&apos;msgTyp&apos;, msgTyp.toString());</string>
            </entry>
          </data>
        </step>
      </steps>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundProtocol>XML</inboundProtocol>
      <outboundProtocol>XML</outboundProtocol>
      <inboundProperties>
        <property name="stripNamespaces">false</property>
      </inboundProperties>
      <outboundProperties>
        <property name="stripNamespaces">false</property>
      </outboundProperties>
    </transformer>
    <filter>
      <rules/>
    </filter>
    <transportName>Web Service Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <version>2.1.1.5490</version>
  </sourceConnector>
  <destinationConnectors>
    <connector>
      <name>RegistrationTransformationConnector</name>
      <properties>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
        <property name="script">//supposed to do RegistrationTransformation
return;</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>RegistrationTransformationTransformer</name>
            <script>var regnMsg = null;
try {
	logger.debug(&quot;msg in Regn Trns = &quot; +msg);
	var regnMsgStr = transformMessage(msg, &quot;crToRegnMsgTransformer&quot;);

	regnMsg = new XML(regnMsgStr);

	channelMap.put(&apos;msgForBroadcaster&apos;, regnMsg);

} catch(err) {
	var intgExcp = new Packages.gov.nih.nci.integration.exception.IntegrationException(Packages.gov.nih.nci.integration.exception.IntegrationError._1018, null);
	channelMap.put(&apos;CACIS_ERROR&apos;, intgExcp);
}

return;</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>var regnMsg = null;
try {
	logger.debug(&quot;msg in Regn Trns = &quot; +msg);
	var regnMsgStr = transformMessage(msg, &quot;crToRegnMsgTransformer&quot;);

	regnMsg = new XML(regnMsgStr);

	channelMap.put(&apos;msgForBroadcaster&apos;, regnMsg);

} catch(err) {
	var intgExcp = new Packages.gov.nih.nci.integration.exception.IntegrationException(Packages.gov.nih.nci.integration.exception.IntegrationError._1018, null);
	channelMap.put(&apos;CACIS_ERROR&apos;, intgExcp);
}

return;</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;$(&apos;msgTyp&apos;)&quot; equals globalMap.get(&apos;REGN&apos;) or globalMap.get(&apos;UPDTREGN&apos;)</name>
            <data class="map">
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>globalMap.get(&apos;REGN&apos;)</string>
                  <string>globalMap.get(&apos;UPDTREGN&apos;)</string>
                </list>
              </entry>
              <entry>
                <string>Field</string>
                <string>$(&apos;msgTyp&apos;)</string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;msgTyp&apos;) == globalMap.get(&apos;REGN&apos;) || $(&apos;msgTyp&apos;) == globalMap.get(&apos;UPDTREGN&apos;))
{
return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>AdverseEventTransformationConnector</name>
      <properties>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
        <property name="script">//supposed to handle AE Transformation
return;</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>AdverseEventTransformationTransformer</name>
            <script>var aeMsg = null;
try {
	var aeMsgStr = transformMessage(msg, &quot;crToAeMsgTransformer&quot;);

	aeMsg = new XML(aeMsgStr);

	channelMap.put(&apos;msgForBroadcaster&apos;, aeMsg);

} catch(err) {
	var intgExcp = new Packages.gov.nih.nci.integration.exception.IntegrationException(Packages.gov.nih.nci.integration.exception.IntegrationError._1024, null);
	channelMap.put(&apos;CACIS_ERROR&apos;, intgExcp);
}

return;</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>var aeMsg = null;
try {
	var aeMsgStr = transformMessage(msg, &quot;crToAeMsgTransformer&quot;);

	aeMsg = new XML(aeMsgStr);

	channelMap.put(&apos;msgForBroadcaster&apos;, aeMsg);

} catch(err) {
	var intgExcp = new Packages.gov.nih.nci.integration.exception.IntegrationException(Packages.gov.nih.nci.integration.exception.IntegrationError._1024, null);
	channelMap.put(&apos;CACIS_ERROR&apos;, intgExcp);
}

return;</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;$(&apos;msgTyp&apos;)&quot; equals globalMap.get(&apos;AE&apos;)</name>
            <data class="map">
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>globalMap.get(&apos;AE&apos;)</string>
                </list>
              </entry>
              <entry>
                <string>Field</string>
                <string>$(&apos;msgTyp&apos;)</string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;msgTyp&apos;) == globalMap.get(&apos;AE&apos;))
{
return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>MessageBroadcasterChannelConnector</name>
      <properties>
        <property name="DataType">Channel Writer</property>
        <property name="host">caa43737-c755-4a8e-bba7-ef610c9b8f2d</property>
        <property name="synchronised">1</property>
        <property name="template">${msgForBroadcaster}</property>
      </properties>
      <transformer>
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Accept message if &quot;$(&apos;msgTyp&apos;)&quot; equals globalMap.get(&apos;REGN&apos;) or globalMap.get(&apos;AE&apos;) or globalMap.get(&apos;UPDTREGN&apos;)</name>
            <data class="map">
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>globalMap.get(&apos;REGN&apos;)</string>
                  <string>globalMap.get(&apos;AE&apos;)</string>
                  <string>globalMap.get(&apos;UPDTREGN&apos;)</string>
                </list>
              </entry>
              <entry>
                <string>Field</string>
                <string>$(&apos;msgTyp&apos;)</string>
              </entry>
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;msgTyp&apos;) == globalMap.get(&apos;REGN&apos;) || $(&apos;msgTyp&apos;) == globalMap.get(&apos;AE&apos;) || $(&apos;msgTyp&apos;) == globalMap.get(&apos;UPDTREGN&apos;))
{
return true;
}
return false;</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>ResponseWriterConnector</name>
      <properties>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
        <property name="script">//handle all responses and create appropriate response for this channel

var msgTyp = $(&apos;msgTyp&apos;);

logger.info(&quot;msgTyp=&quot;+ msgTyp);

if(	msgTyp != globalMap.get(&apos;AE&apos;) 
	&amp;&amp; msgTyp != globalMap.get(&apos;REGN&apos;)
	&amp;&amp; msgTyp != globalMap.get(&apos;UPDTREGN&apos;)
	) {
	var msgParams = [&quot;value1&quot;, &quot;value2&quot;];
	var intgExcp = new Packages.gov.nih.nci.integration.exception.IntegrationException(Packages.gov.nih.nci.integration.exception.IntegrationError._1050, msgParams);
	responseMap.put(&quot;ResponseWriterConnector&quot;, convertIntegrationExceptionToCaCISError(intgExcp));
	return;
}

var cacisError = channelMap.get(&apos;CACIS_ERROR&apos;);

if(cacisError != null){
	var cacisResponse = convertIntegrationExceptionToCaCISError(cacisError);

	responseMap.put(&quot;ResponseWriterConnector&quot;, cacisResponse);

	return;
}


var msgBCRes = responseMap.get(&apos;MessageBroadcasterChannelConnector&apos;);
logger.debug(&quot;msgBCRes = &quot; + msgBCRes);

var msgBCResult = msgBCRes.getMessage();

if(msgBCResult.lastIndexOf(&apos;Success&apos;, 0) == 0 ) {
	responseMap.put(&quot;ResponseWriterConnector&quot;, msgBCRes);	
} else {	
	responseMap.put(&quot;ResponseWriterConnector&quot;, ResponseFactory.getFailureResponse(convertMsgBCErrorToCaCISError(msgBCResult)));
}

return;</property>
      </properties>
      <transformer>
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
  </destinationConnectors>
  <properties>
    <property name="clearGlobalChannelMap">true</property>
    <property name="dont_store_filtered">false</property>
    <property name="encryptData">false</property>
    <property name="error_messages_only">false</property>
    <property name="initialState">started</property>
    <property name="max_message_age">-1</property>
    <property name="store_messages">true</property>
    <property name="synchronous">true</property>
    <property name="transactional">false</property>
  </properties>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

var commonAppCtx = globalMap.get(&quot;commonAppCtx&quot;);

if(commonAppCtx == null) {
  	commonAppCtx = new Packages.org.springframework.context.support.ClassPathXmlApplicationContext(&quot;classpath*:applicationContext-common.xml&quot;);	
	//commonAppCtx = new Packages.gov.nih.nci.integration.util.CustomClasspathXmlApplicationContext(&quot;./common-lib/&quot;, &quot;classpath*:applicationContext-common.xml&quot;);
	globalMap.put(&quot;commonAppCtx&quot;, commonAppCtx);
}

var baseXSLClasspath=&quot;C:/Users/sb-admin-cp/.integration/ihub/xsl/&quot;;

var crToRegnMsgTransformer = commonAppCtx.getBean(&quot;xsltTransformer&quot;);
crToRegnMsgTransformer.initTransformer(&quot;CaCISRequest-to-MsgBroadcasterInboundMsg.xsl&quot;, baseXSLClasspath);

globalMap.put(&quot;crToRegnMsgTransformer&quot;, crToRegnMsgTransformer);

var crToAeMsgTransformer = commonAppCtx.getBean(&quot;xsltTransformer&quot;);
crToAeMsgTransformer.initTransformer(&quot;CaCISRequest-to-MsgBroadcasterInboundMsg.xsl&quot;, baseXSLClasspath);

globalMap.put(&quot;crToAeMsgTransformer&quot;, crToAeMsgTransformer);

return;</deployScript>
  <shutdownScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</shutdownScript>
</channel>