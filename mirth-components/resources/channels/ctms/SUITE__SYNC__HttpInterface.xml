<com.webreach.mirth.model.Channel>
  <id>3a29281b-e9c5-49b7-9565-4ed1d4fa32b3</id>
  <name>SUITE__SYNC__HttpInterface</name>
  <description></description>
  <enabled>true</enabled>
  <version>1.8.2</version>
  <lastModified>
    <time>1292262974046</time>
    <timezone>America/New_York</timezone>
  </lastModified>
  <revision>202</revision>
  <sourceConnector>
    <name>sourceConnector</name>
    <properties>
      <property name="payloadEncoding">None</property>
      <property name="bufferSize">65536</property>
      <property name="port">8195</property>
      <property name="appendPayload">0</property>
      <property name="DataType">HTTP Listener</property>
      <property name="keepAliveTimeout">5000</property>
      <property name="extendedPayload">1</property>
      <property name="host">127.0.0.1</property>
      <property name="keepAlive">0</property>
      <property name="responseValue">SuiteSynchronousResponse</property>
    </properties>
    <transformer>
      <steps>
        <com.webreach.mirth.model.Step>
          <sequenceNumber>0</sequenceNumber>
          <name>Extract Message</name>
          <script>var nonencodedSyncMsg = Packages.java.net.URLDecoder.decode(msg[&apos;synchronous_msg&apos;].toString());
var coppaDelegatedCredentialRefFromMsg = Packages.java.net.URLDecoder.decode(msg[&apos;coppa_delegated_credential_ref&apos;].toString());

channelMap.put(&apos;coppaDelegatedCredentialRef&apos;, coppaDelegatedCredentialRefFromMsg);
channelMap.put(&apos;IS_IHUB_PROCESSING_ERROR&apos;, false);

//var reqXML = SerializerFactory.getHL7Serializer(false, false, false).toXML(nonencodedhl7);
msg = new XML(nonencodedSyncMsg);</script>
          <type>JavaScript</type>
          <data class="map">
            <entry>
              <string>Script</string>
              <string>var nonencodedSyncMsg = Packages.java.net.URLDecoder.decode(msg[&apos;synchronous_msg&apos;].toString());
var coppaDelegatedCredentialRefFromMsg = Packages.java.net.URLDecoder.decode(msg[&apos;coppa_delegated_credential_ref&apos;].toString());

channelMap.put(&apos;coppaDelegatedCredentialRef&apos;, coppaDelegatedCredentialRefFromMsg);
channelMap.put(&apos;IS_IHUB_PROCESSING_ERROR&apos;, false);

//var reqXML = SerializerFactory.getHL7Serializer(false, false, false).toXML(nonencodedhl7);
msg = new XML(nonencodedSyncMsg);</string>
            </entry>
          </data>
        </com.webreach.mirth.model.Step>
      </steps>
      <inboundTemplate>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#x0D;
&lt;message&gt;&#x0D;
    &lt;synchronous_msg&gt;%3Crequest%3E%3Cmetadata%3E%3Cuid%3E66b20b26-dc51-11df-9972-ddc780619c0d%3C%2Fuid%3E%3Csourceformat%3EDELIMITED%3C%2Fsourceformat%3E%3Ctargetformat%3EHL7V3%3C%2Ftargetformat%3E%3C%2Fmetadata%3E%3Cpayload%3ESantosh%2CGiambi%2C08%2F20%2F1968%2CMale%2CDuke%3C%2Fpayload%3E%3C%2Frequest%3E&lt;/synchronous_msg&gt;&#x0D;
    &lt;http.version&gt;HTTP/1.1&lt;/http.version&gt;&#x0D;
    &lt;Content-Length&gt;301&lt;/Content-Length&gt;&#x0D;
    &lt;User-Agent&gt;Test Client&lt;/User-Agent&gt;&#x0D;
    &lt;Host&gt;localhost&lt;/Host&gt;&#x0D;
    &lt;http.method&gt;POST&lt;/http.method&gt;&#x0D;
    &lt;http.request&gt;/&lt;/http.request&gt;&#x0D;
    &lt;Content-Type&gt;application/x-www-form-urlencoded&lt;/Content-Type&gt;&#x0D;
    &lt;mirth.http.password&gt;changeme&lt;/mirth.http.password&gt;&#x0D;
    &lt;mirth.http.user&gt;tomcatuser&lt;/mirth.http.user&gt;&#x0D;
&lt;/message&gt;</inboundTemplate>
      <outboundTemplate></outboundTemplate>
      <inboundProtocol>XML</inboundProtocol>
      <outboundProtocol>XML</outboundProtocol>
      <inboundProperties>
        <property name="stripNamespaces">true</property>
      </inboundProperties>
      <outboundProperties>
        <property name="stripNamespaces">false</property>
      </outboundProperties>
    </transformer>
    <filter>
      <rules>
        <com.webreach.mirth.model.Rule>
          <sequenceNumber>0</sequenceNumber>
          <name>Accept message if &quot;mirth.http.user&quot; equals globalMap.get(&apos;mirth.http.user.tomcat&apos;)</name>
          <data class="map">
            <entry>
              <string>OriginalField</string>
              <string>msg[&apos;mirth.http.user&apos;].toString()</string>
            </entry>
            <entry>
              <string>Values</string>
              <list>
                <string>globalMap.get(&apos;mirth.http.user.tomcat&apos;)</string>
              </list>
            </entry>
            <entry>
              <string>Equals</string>
              <string>1</string>
            </entry>
            <entry>
              <string>Field</string>
              <string>msg[&apos;mirth.http.user&apos;].toString()</string>
            </entry>
            <entry>
              <string>Name</string>
              <string>mirth.http.user</string>
            </entry>
            <entry>
              <string>Accept</string>
              <string>1</string>
            </entry>
          </data>
          <type>Rule Builder</type>
          <script>if(msg[&apos;mirth.http.user&apos;].toString() == globalMap.get(&apos;mirth.http.user.tomcat&apos;))
{
return true;
}
return false;</script>
          <operator>NONE</operator>
        </com.webreach.mirth.model.Rule>
        <com.webreach.mirth.model.Rule>
          <sequenceNumber>1</sequenceNumber>
          <name>Accept message if &quot;mirth.http.password&quot; equals globalMap.get(&apos;mirth.http.password.tomcat&apos;)</name>
          <data class="map">
            <entry>
              <string>OriginalField</string>
              <string>msg[&apos;mirth.http.password&apos;].toString()</string>
            </entry>
            <entry>
              <string>Values</string>
              <list>
                <string>globalMap.get(&apos;mirth.http.password.tomcat&apos;)</string>
              </list>
            </entry>
            <entry>
              <string>Equals</string>
              <string>1</string>
            </entry>
            <entry>
              <string>Field</string>
              <string>msg[&apos;mirth.http.password&apos;].toString()</string>
            </entry>
            <entry>
              <string>Name</string>
              <string>mirth.http.password</string>
            </entry>
            <entry>
              <string>Accept</string>
              <string>1</string>
            </entry>
          </data>
          <type>Rule Builder</type>
          <script>if(msg[&apos;mirth.http.password&apos;].toString() == globalMap.get(&apos;mirth.http.password.tomcat&apos;))
{
return true;
}
return false;</script>
          <operator>AND</operator>
        </com.webreach.mirth.model.Rule>
      </rules>
    </filter>
    <transportName>HTTP Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
  </sourceConnector>
  <destinationConnectors>
    <com.webreach.mirth.model.Connector>
      <name>Persist Message In the Database</name>
      <properties>
        <property name="script">insertIncomingMessageInDB($(&apos;ns1metadata_ns1caxchangeidentifier&apos;), $(&apos;ns1request_ns1businessmessagepayload&apos;), 
	Packages.gov.nih.nci.ihub.util.HubConstants.MESSAGE_STATUS_IN_PROCESS, $(&apos;ns1request_ns1businessmessagepayload_ns1xmlschemadefinition&apos;), $(&apos;ns1metadata&apos;));</property>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
      </properties>
      <transformer>
        <steps>
          <com.webreach.mirth.model.Step>
            <sequenceNumber>0</sequenceNumber>
            <name>Settings</name>
            <script>default xml namespace = &quot;http://caXchange.nci.nih.gov/messaging&quot;</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>default xml namespace = &quot;http://caXchange.nci.nih.gov/messaging&quot;</string>
              </entry>
            </data>
          </com.webreach.mirth.model.Step>
          <com.webreach.mirth.model.Step>
            <sequenceNumber>1</sequenceNumber>
            <name>ns1metadata_ns1servicetype</name>
            <script>var mapping;try { mapping = msg[&apos;metadata&apos;][&apos;serviceType&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;ns1metadata_ns1servicetype&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
            <type>Mapper</type>
            <data class="map">
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;metadata&apos;][&apos;serviceType&apos;].toString()</string>
              </entry>
              <entry>
                <string>Variable</string>
                <string>ns1metadata_ns1servicetype</string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>isGlobal</string>
                <string>channel</string>
              </entry>
            </data>
          </com.webreach.mirth.model.Step>
          <com.webreach.mirth.model.Step>
            <sequenceNumber>2</sequenceNumber>
            <name>ns1metadata_ns1caxchangeidentifier</name>
            <script>var mapping;try { mapping = msg[&apos;metadata&apos;][&apos;caXchangeIdentifier&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;ns1metadata_ns1caxchangeidentifier&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
            <type>Mapper</type>
            <data class="map">
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;metadata&apos;][&apos;caXchangeIdentifier&apos;].toString()</string>
              </entry>
              <entry>
                <string>Variable</string>
                <string>ns1metadata_ns1caxchangeidentifier</string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>isGlobal</string>
                <string>channel</string>
              </entry>
            </data>
          </com.webreach.mirth.model.Step>
          <com.webreach.mirth.model.Step>
            <sequenceNumber>3</sequenceNumber>
            <name>ns1request_ns1businessmessagepayload</name>
            <script>var mapping;try { mapping = msg[&apos;request&apos;][&apos;businessMessagePayload&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;ns1request_ns1businessmessagepayload&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
            <type>Mapper</type>
            <data class="map">
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;request&apos;][&apos;businessMessagePayload&apos;].toString()</string>
              </entry>
              <entry>
                <string>Variable</string>
                <string>ns1request_ns1businessmessagepayload</string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>isGlobal</string>
                <string>channel</string>
              </entry>
            </data>
          </com.webreach.mirth.model.Step>
          <com.webreach.mirth.model.Step>
            <sequenceNumber>4</sequenceNumber>
            <name>ns1request_ns1businessmessagepayload_ns1xmlschemadefinition</name>
            <script>var mapping;try { mapping = msg[&apos;request&apos;][&apos;businessMessagePayload&apos;][&apos;xmlSchemaDefinition&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;ns1request_ns1businessmessagepayload_ns1xmlschemadefinition&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
            <type>Mapper</type>
            <data class="map">
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;request&apos;][&apos;businessMessagePayload&apos;][&apos;xmlSchemaDefinition&apos;].toString()</string>
              </entry>
              <entry>
                <string>Variable</string>
                <string>ns1request_ns1businessmessagepayload_ns1xmlschemadefinition</string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>isGlobal</string>
                <string>channel</string>
              </entry>
            </data>
          </com.webreach.mirth.model.Step>
          <com.webreach.mirth.model.Step>
            <sequenceNumber>5</sequenceNumber>
            <name>ns1metadata</name>
            <script>var mapping;try { mapping = msg[&apos;metadata&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;ns1metadata&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
            <type>Mapper</type>
            <data class="map">
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;metadata&apos;].toString()</string>
              </entry>
              <entry>
                <string>Variable</string>
                <string>ns1metadata</string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>isGlobal</string>
                <string>channel</string>
              </entry>
            </data>
          </com.webreach.mirth.model.Step>
          <com.webreach.mirth.model.Step>
            <sequenceNumber>6</sequenceNumber>
            <name>ns1metadata_ns1operationname</name>
            <script>var mapping;try { mapping = msg[&apos;metadata&apos;][&apos;operationName&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;ns1metadata_ns1operationname&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
            <type>Mapper</type>
            <data class="map">
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;metadata&apos;][&apos;operationName&apos;].toString()</string>
              </entry>
              <entry>
                <string>Variable</string>
                <string>ns1metadata_ns1operationname</string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>isGlobal</string>
                <string>channel</string>
              </entry>
            </data>
          </com.webreach.mirth.model.Step>
          <com.webreach.mirth.model.Step>
            <sequenceNumber>7</sequenceNumber>
            <name>ns1metadata_ns1externalidentifier</name>
            <script>var mapping;try { mapping = msg[&apos;metadata&apos;][&apos;externalIdentifier&apos;].toString(); }catch (e) { logger.error(e);  mapping = &apos;&apos;;}channelMap.put(&apos;ns1metadata_ns1externalidentifier&apos;, validate( mapping , &apos;&apos;, new Array()));</script>
            <type>Mapper</type>
            <data class="map">
              <entry>
                <string>Mapping</string>
                <string>msg[&apos;metadata&apos;][&apos;externalIdentifier&apos;].toString()</string>
              </entry>
              <entry>
                <string>Variable</string>
                <string>ns1metadata_ns1externalidentifier</string>
              </entry>
              <entry>
                <string>RegularExpressions</string>
                <list/>
              </entry>
              <entry>
                <string>DefaultValue</string>
                <string></string>
              </entry>
              <entry>
                <string>isGlobal</string>
                <string>channel</string>
              </entry>
            </data>
          </com.webreach.mirth.model.Step>
          <com.webreach.mirth.model.Step>
            <sequenceNumber>8</sequenceNumber>
            <name>Create Grid Message</name>
            <script>logger.info(&quot;iHub Message: &quot;+$(&apos;ns1request_ns1businessmessagepayload&apos;));
var ihubBusinessMessagePayloadDocument = Packages.gov.nih.nci.ihub.util.IntegrationHubUtil.
	stringToDOMDocument($(&apos;ns1request_ns1businessmessagepayload&apos;)).getDocumentElement();
channelMap.put(&quot;ihubBusinessMessagePayloadDocument&quot;, ihubBusinessMessagePayloadDocument);</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>logger.info(&quot;iHub Message: &quot;+$(&apos;ns1request_ns1businessmessagepayload&apos;));
var ihubBusinessMessagePayloadDocument = Packages.gov.nih.nci.ihub.util.IntegrationHubUtil.
	stringToDOMDocument($(&apos;ns1request_ns1businessmessagepayload&apos;)).getDocumentElement();
channelMap.put(&quot;ihubBusinessMessagePayloadDocument&quot;, ihubBusinessMessagePayloadDocument);</string>
              </entry>
            </data>
          </com.webreach.mirth.model.Step>
        </steps>
        <inboundTemplate>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#x0D;
&lt;ns1:caXchangeRequestMessage xmlns:ns1=&quot;http://caXchange.nci.nih.gov/messaging&quot;&gt;&#x0D;
    &lt;ns1:metadata&gt;&#x0D;
        &lt;ns1:transactionControl xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:nil=&quot;true&quot;/&gt;&#x0D;
        &lt;ns1:serviceType&gt;PERSON&lt;/ns1:serviceType&gt;&#x0D;
        &lt;ns1:operationName&gt;search&lt;/ns1:operationName&gt;&#x0D;
        &lt;ns1:caXchangeIdentifier&gt;d1f6f8b0-eb57-11df-b0a6-857449edcfa9&lt;/ns1:caXchangeIdentifier&gt;&#x0D;
        &lt;ns1:externalIdentifier&gt;myExternalIdentifier&lt;/ns1:externalIdentifier&gt;&#x0D;
        &lt;ns1:credentials&gt;&#x0D;
            &lt;ns1:userName&gt;dev2_sm_reg&lt;/ns1:userName&gt;&#x0D;
            &lt;ns1:password&gt;D3v2@nc1.gov&lt;/ns1:password&gt;&#x0D;
            &lt;ns1:delegatedCredentialReference&gt;&amp;lt;ns1:DelegatedCredentialReference xmlns:ns1=&quot;http://cds.gaards.cagrid.org/CredentialDelegationService/DelegatedCredential/types&quot;&amp;gt; &amp;lt;ns2:EndpointReference xsi:type=&quot;ns2:EndpointReferenceType&quot; xmlns:ns2=&quot;http://schemas.xmlsoap.org/ws/2004/03/addressing&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt;  &amp;lt;ns2:Address xsi:type=&quot;ns2:AttributedURI&quot;&amp;gt;https://cagrid-cds-stage.nci.nih.gov:8443/wsrf/services/cagrid/DelegatedCredential&amp;lt;/ns2:Address&amp;gt;  &amp;lt;ns2:ReferenceProperties xsi:type=&quot;ns2:ReferencePropertiesType&quot;&amp;gt;   &amp;lt;ns2:DelegatedCredentialKey xmlns:ns2=&quot;http://cds.gaards.cagrid.org/CredentialDelegationService/DelegatedCredential&quot;&amp;gt;    &amp;lt;ns3:delegationId xmlns:ns3=&quot;http://gaards.cagrid.org/cds&quot;&amp;gt;11765&amp;lt;/ns3:delegationId&amp;gt;   &amp;lt;/ns2:DelegatedCredentialKey&amp;gt;  &amp;lt;/ns2:ReferenceProperties&amp;gt;  &amp;lt;ns2:ReferenceParameters xsi:type=&quot;ns2:ReferenceParametersType&quot;/&amp;gt; &amp;lt;/ns2:EndpointReference&amp;gt;&amp;lt;/ns1:DelegatedCredentialReference&amp;gt;&lt;/ns1:delegatedCredentialReference&gt;&#x0D;
        &lt;/ns1:credentials&gt;&#x0D;
    &lt;/ns1:metadata&gt;&#x0D;
    &lt;ns1:request&gt;&#x0D;
        &lt;ns1:businessMessagePayload&gt;&#x0D;
            &lt;ns1:xmlSchemaDefinition&gt;http://po.coppa.nci.nih.gov&lt;/ns1:xmlSchemaDefinition&gt;&#x0D;
            &lt;ns1:Person xmlns:ns1=&quot;http://po.coppa.nci.nih.gov&quot; xmlns:ns2=&quot;uri:iso.org:21090&quot;&gt;&#x0D;
                &lt;ns1:name&gt;&#x0D;
                    &lt;ns2:part type=&quot;FAM&quot; value=&quot;smith&quot;/&gt;&#x0D;
                    &lt;ns2:part type=&quot;GIV&quot; value=&quot;Adriana&quot;/&gt;&#x0D;
                &lt;/ns1:name&gt;&#x0D;
            &lt;/ns1:Person&gt;&#x0D;
        &lt;/ns1:businessMessagePayload&gt;&#x0D;
    &lt;/ns1:request&gt;&#x0D;
&lt;/ns1:caXchangeRequestMessage&gt;&#x0D;</inboundTemplate>
        <outboundTemplate></outboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">true</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
    </com.webreach.mirth.model.Connector>
    <com.webreach.mirth.model.Connector>
      <name>Retrieve Security Subject</name>
      <properties>
        <property name="script">//var subject = invokeDelegationService($(&apos;coppaDelegatedCredentialRef&apos;), globalMap.get(&quot;delegation.certificate.file.path&quot;),
//	 globalMap.get(&quot;delegation.key.file.path&quot;), globalMap.get(&quot;target.detail.code.delegation&quot;), $(&apos;ns1metadata_ns1caxchangeidentifier&apos;));

//channelMap.put(&quot;coppaSubject&quot;, subject);
return;</property>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
      </properties>
      <transformer>
        <steps>
          <com.webreach.mirth.model.Step>
            <sequenceNumber>0</sequenceNumber>
            <name>Retrieve Security Subject</name>
            <script>logger.info(&quot;Invoking Delegation Service&quot;);
var subject = invokeDelegationService($(&apos;coppaDelegatedCredentialRef&apos;), globalMap.get(&quot;coppa.mirth.delegation.certificate.file.path&quot;),
	 globalMap.get(&quot;coppa.mirth.delegation.key.file.path&quot;), globalMap.get(&quot;target.detail.code.delegation&quot;), $(&apos;ns1metadata_ns1caxchangeidentifier&apos;));
logger.info(&quot;Subject: &quot;+subject);
channelMap.put(&quot;coppaSubject&quot;, subject);







//use this function to replace success and error response XML functions
function createResponseXML(varGridInvocationResult, varTargetDetailCode, varRequestXMLSchemaDefinition, varIsError){
	var generateResponseBean = new Packages.gov.nih.nci.ihub.writer.ncies.common.GenerateResponseBean();
	if(varIsError){
		var gridInvocationResultDocument = generateResponseBean.createErrorDocument(varTargetDetailCode, new Packages.java.lang.String(&quot;&quot;),
			 varException);
	} else{
		var gridInvocationResultDocument = generateResponseBean.createOutputDocument(varTargetDetailCode, new Packages.java.lang.String(&quot;&quot;),
			varRequestXMLSchemaDefinition, varGridInvocationResult);
	}	
	var successResponseXML = Packages.gov.nih.nci.ihub.util.IntegrationHubUtil.xmlToString(gridInvocationResultDocument);
	return successResponseXML;
}


function createErrorResponseXML(varException, varTargetDetailCode){
	var generateResponseBean = new Packages.gov.nih.nci.ihub.writer.ncies.common.GenerateResponseBean();
	var gridInvocationResultDocument = generateResponseBean.createErrorDocument(varTargetDetailCode, new Packages.java.lang.String(&quot;&quot;),
			 varException);
	var errorResponseXML = Packages.gov.nih.nci.ihub.util.IntegrationHubUtil.xmlToString(gridInvocationResultDocument);
	return errorResponseXML;
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>logger.info(&quot;Invoking Delegation Service&quot;);
var subject = invokeDelegationService($(&apos;coppaDelegatedCredentialRef&apos;), globalMap.get(&quot;coppa.mirth.delegation.certificate.file.path&quot;),
	 globalMap.get(&quot;coppa.mirth.delegation.key.file.path&quot;), globalMap.get(&quot;target.detail.code.delegation&quot;), $(&apos;ns1metadata_ns1caxchangeidentifier&apos;));
logger.info(&quot;Subject: &quot;+subject);
channelMap.put(&quot;coppaSubject&quot;, subject);







//use this function to replace success and error response XML functions
function createResponseXML(varGridInvocationResult, varTargetDetailCode, varRequestXMLSchemaDefinition, varIsError){
	var generateResponseBean = new Packages.gov.nih.nci.ihub.writer.ncies.common.GenerateResponseBean();
	if(varIsError){
		var gridInvocationResultDocument = generateResponseBean.createErrorDocument(varTargetDetailCode, new Packages.java.lang.String(&quot;&quot;),
			 varException);
	} else{
		var gridInvocationResultDocument = generateResponseBean.createOutputDocument(varTargetDetailCode, new Packages.java.lang.String(&quot;&quot;),
			varRequestXMLSchemaDefinition, varGridInvocationResult);
	}	
	var successResponseXML = Packages.gov.nih.nci.ihub.util.IntegrationHubUtil.xmlToString(gridInvocationResultDocument);
	return successResponseXML;
}


function createErrorResponseXML(varException, varTargetDetailCode){
	var generateResponseBean = new Packages.gov.nih.nci.ihub.writer.ncies.common.GenerateResponseBean();
	var gridInvocationResultDocument = generateResponseBean.createErrorDocument(varTargetDetailCode, new Packages.java.lang.String(&quot;&quot;),
			 varException);
	var errorResponseXML = Packages.gov.nih.nci.ihub.util.IntegrationHubUtil.xmlToString(gridInvocationResultDocument);
	return errorResponseXML;
}</string>
              </entry>
            </data>
          </com.webreach.mirth.model.Step>
        </steps>
        <inboundTemplate></inboundTemplate>
        <outboundTemplate></outboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
    </com.webreach.mirth.model.Connector>
    <com.webreach.mirth.model.Connector>
      <name>COPPA Invoker</name>
      <properties>
        <property name="script">logger.debug(&quot;Processing COPPA Invoker destination&quot;);
var targetInvocationStrategy = globalMap.get($(&apos;ns1metadata_ns1servicetype&apos;)+&quot;_Strategy&quot;);
targetInvocationStrategy.setStrategySpecificVariables($(&apos;ns1metadata_ns1operationname&apos;), 
							$(&apos;ns1metadata_ns1servicetype&apos;), $(&apos;ihubBusinessMessagePayloadDocument&apos;), $(&apos;coppaSubject&apos;), $(&apos;ns1metadata_ns1servicetype&apos;));


var overallResponseString = delegateSynchronousRequest($(&apos;ns1metadata_ns1servicetype&apos;), targetInvocationStrategy, 
								$(&apos;ns1metadata_ns1caxchangeidentifier&apos;), $(&apos;ns1metadata_ns1externalidentifier&apos;), 
								$(&apos;ns1metadata_ns1operationname&apos;), $(&apos;ns1request_ns1businessmessagepayload_ns1xmlschemadefinition&apos;));
channelMap.put(&quot;overallResponseString&quot;, overallResponseString);</property>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
      </properties>
      <transformer>
        <steps/>
        <inboundTemplate></inboundTemplate>
        <outboundTemplate></outboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">false</property>
        </inboundProperties>
        <outboundProperties/>
      </transformer>
      <filter>
        <rules>
          <com.webreach.mirth.model.Rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Reject message if &quot;$(&apos;IS_IHUB_PROCESSING_ERROR&apos;)&quot; equals true</name>
            <data class="map">
              <entry>
                <string>OriginalField</string>
                <string></string>
              </entry>
              <entry>
                <string>Values</string>
                <list>
                  <string>true</string>
                </list>
              </entry>
              <entry>
                <string>Equals</string>
                <string>1</string>
              </entry>
              <entry>
                <string>Field</string>
                <string>$(&apos;IS_IHUB_PROCESSING_ERROR&apos;)</string>
              </entry>
              <entry>
                <string>Name</string>
                <string></string>
              </entry>
              <entry>
                <string>Accept</string>
                <string>0</string>
              </entry>
            </data>
            <type>Rule Builder</type>
            <script>if($(&apos;IS_IHUB_PROCESSING_ERROR&apos;) == true)
{
return false;
}
return true;</script>
            <operator>NONE</operator>
          </com.webreach.mirth.model.Rule>
        </rules>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
    </com.webreach.mirth.model.Connector>
    <com.webreach.mirth.model.Connector>
      <name>Write Response</name>
      <properties>
        <property name="script">//responseMap.put(&apos;SOAPResponse&apos;, ResponseFactory.getSuccessResponse(globalMap.get(messageObject.getId())));
//var overallResponseString = retrieveOverallBroadcastResponseFromDB($(&apos;ns1metadata_ns1caxchangeidentifier&apos;));
//channelMap.put(&quot;message_overall_response&quot;,overallResponseString);

responseMap.put(&apos;SuiteSynchronousResponse&apos;, ResponseFactory.getSuccessResponse(channelMap.get(&quot;overallResponseString&quot;)));



//responseMap.put(&apos;SOAPResponse&apos;, ResponseFactory.getSuccessResponse(responseMap.get($(&apos;DELIMITED TO HL7V3&apos;))));
</property>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
      </properties>
      <transformer>
        <steps/>
        <inboundTemplate></inboundTemplate>
        <outboundTemplate></outboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
    </com.webreach.mirth.model.Connector>
  </destinationConnectors>
  <properties>
    <property name="initialState">started</property>
    <property name="synchronous">true</property>
    <property name="store_messages">true</property>
    <property name="encryptData">true</property>
    <property name="transactional">false</property>
    <property name="max_message_age">-1</property>
    <property name="dont_store_filtered">false</property>
    <property name="error_messages_only">false</property>
  </properties>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
return;</postprocessingScript>
  <deployScript>/*********************************************************
*****************   PO SERVICES   ************************
*********************************************************/
var coppaPersonStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaPersonStrategy.setServiceUrl(globalMap.get(&quot;PERSON.url&quot;));
coppaPersonStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.entities.person.client.PersonClient&quot;);
coppaPersonStrategy.init();
globalMap.put(&quot;PERSON_Strategy&quot;, coppaPersonStrategy);


var coppaOrganizationStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaOrganizationStrategy.setServiceUrl(globalMap.get(&quot;ORGANIZATION.url&quot;));
coppaOrganizationStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.entities.organization.client.OrganizationClient&quot;);
coppaOrganizationStrategy.init();
globalMap.put(&quot;ORGANIZATION_Strategy&quot;, coppaOrganizationStrategy);


var coppaClinicalResearchStaffStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaClinicalResearchStaffStrategy.setServiceUrl(globalMap.get(&quot;CLINICAL_RESEARCH_STAFF.url&quot;));
coppaClinicalResearchStaffStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.structuralroles.clinicalresearchstaff.client.ClinicalResearchStaffClient&quot;);
coppaClinicalResearchStaffStrategy.init();
globalMap.put(&quot;CLINICAL_RESEARCH_STAFF_Strategy&quot;, coppaClinicalResearchStaffStrategy);


var coppaIdentifiedOrganizationStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaIdentifiedOrganizationStrategy.setServiceUrl(globalMap.get(&quot;IDENTIFIED_ORGANIZATION.url&quot;));
coppaIdentifiedOrganizationStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.structuralroles.identifiedorganization.client.IdentifiedOrganizationClient&quot;);
coppaIdentifiedOrganizationStrategy.init();
globalMap.put(&quot;IDENTIFIED_ORGANIZATION_Strategy&quot;, coppaIdentifiedOrganizationStrategy);


var coppaHealthCareProviderStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaHealthCareProviderStrategy.setServiceUrl(globalMap.get(&quot;HEALTH_CARE_PROVIDER.url&quot;));
coppaHealthCareProviderStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.structuralroles.healthcareprovider.client.HealthCareProviderClient&quot;);
coppaHealthCareProviderStrategy.init();
globalMap.put(&quot;HEALTH_CARE_PROVIDER_Strategy&quot;, coppaHealthCareProviderStrategy);


var coppaHealthCareFacilityStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaHealthCareFacilityStrategy.setServiceUrl(globalMap.get(&quot;HEALTH_CARE_FACILITY.url&quot;));
coppaHealthCareFacilityStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.structuralroles.healthcarefacility.client.HealthCareFacilityClient&quot;);
coppaHealthCareFacilityStrategy.init();
globalMap.put(&quot;HEALTH_CARE_FACILITY_Strategy&quot;, coppaHealthCareFacilityStrategy);


var coppaIdentifiedPersonStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaIdentifiedPersonStrategy.setServiceUrl(globalMap.get(&quot;IDENTIFIED_PERSON.url&quot;));
coppaIdentifiedPersonStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.structuralroles.identifiedperson.client.IdentifiedPersonClient&quot;);
coppaIdentifiedPersonStrategy.init();
globalMap.put(&quot;IDENTIFIED_PERSON_Strategy&quot;, coppaIdentifiedPersonStrategy);


var coppaOversightCommitteeStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaOversightCommitteeStrategy.setServiceUrl(globalMap.get(&quot;OVERSIGHT_COMMITTEE.url&quot;));
coppaOversightCommitteeStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.structuralroles.oversightcommittee.client.OversightCommitteeClient&quot;);
coppaOversightCommitteeStrategy.init();
globalMap.put(&quot;OVERSIGHT_COMMITTEE_Strategy&quot;, coppaOversightCommitteeStrategy);


var coppaOrganizationalContactStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaOrganizationalContactStrategy.setServiceUrl(globalMap.get(&quot;ORGANIZATIONAL_CONTACT.url&quot;));
coppaOrganizationalContactStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.structuralroles.organizationalcontact.client.OrganizationalContactClient&quot;);
coppaOrganizationalContactStrategy.init();
globalMap.put(&quot;ORGANIZATIONAL_CONTACT_Strategy&quot;, coppaOrganizationalContactStrategy);


var coppaResearchOrganizationStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaResearchOrganizationStrategy.setServiceUrl(globalMap.get(&quot;RESEARCH_ORGANIZATION.url&quot;));
coppaResearchOrganizationStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.structuralroles.researchorganization.client.ResearchOrganizationClient&quot;);
coppaResearchOrganizationStrategy.init();
globalMap.put(&quot;RESEARCH_ORGANIZATION_Strategy&quot;, coppaResearchOrganizationStrategy);


var coppaPOBusinessStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaPOBusinessStrategy.setServiceUrl(globalMap.get(&quot;PO_BUSINESS.url&quot;));
coppaPOBusinessStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.business.business.client.BusinessClient&quot;);
coppaPOBusinessStrategy.init();
globalMap.put(&quot;PO_BUSINESS_Strategy&quot;, coppaPOBusinessStrategy);


/*********************************************************
*****************   PA SERVICES   ************************
*********************************************************/

var coppaStudyProtocolStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaStudyProtocolStrategy.setServiceUrl(globalMap.get(&quot;STUDY_PROTOCOL.url&quot;));
coppaStudyProtocolStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.pa.studyprotocolservice.client.StudyProtocolServiceClient&quot;);
coppaStudyProtocolStrategy.init();
globalMap.put(&quot;STUDY_PROTOCOL_Strategy&quot;, coppaStudyProtocolStrategy);


var coppaArmStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaArmStrategy.setServiceUrl(globalMap.get(&quot;ARM.url&quot;));
coppaArmStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.pa.armservice.client.ArmServiceClient&quot;);
coppaArmStrategy.init();
globalMap.put(&quot;ARM_Strategy&quot;, coppaArmStrategy);


//var coppaStudyParticipationStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
//coppaStudyParticipationStrategy.setServiceUrl(globalMap.get(&quot;STUDY_PARTICIPATION.url&quot;));
//coppaStudyParticipationStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.entities.organization.client.OrganizationClient&quot;);
//coppaStudyParticipationStrategy.init();
//globalMap.put(&quot;STUDY_PARTICIPATION_Strategy&quot;, coppaStudyParticipationStrategy);


var coppaStudySiteStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaStudySiteStrategy.setServiceUrl(globalMap.get(&quot;STUDY_SITE.url&quot;));
coppaStudySiteStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.pa.studysiteservice.client.StudySiteServiceClient&quot;);
coppaStudySiteStrategy.init();
globalMap.put(&quot;STUDY_SITE_Strategy&quot;, coppaStudySiteStrategy);


var coppaPlannedActivityStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaPlannedActivityStrategy.setServiceUrl(globalMap.get(&quot;PLANNED_ACTIVITY.url&quot;));
coppaPlannedActivityStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.pa.plannedactivityservice.client.PlannedActivityServiceClient&quot;);
coppaPlannedActivityStrategy.init();
globalMap.put(&quot;PLANNED_ACTIVITY_Strategy&quot;, coppaPlannedActivityStrategy);


var coppaStudyContactStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaStudyContactStrategy.setServiceUrl(globalMap.get(&quot;STUDY_CONTACT.url&quot;));
coppaStudyContactStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.pa.studycontactservice.client.StudyContactServiceClient&quot;);
coppaStudyContactStrategy.init();
globalMap.put(&quot;STUDY_CONTACT_Strategy&quot;, coppaStudyContactStrategy);


var coppaStudyDiseaseStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaStudyDiseaseStrategy.setServiceUrl(globalMap.get(&quot;STUDY_DISEASE.url&quot;));
coppaStudyDiseaseStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.pa.studydiseaseservice.client.StudyDiseaseServiceClient&quot;);
coppaStudyDiseaseStrategy.init();
globalMap.put(&quot;STUDY_DISEASE_Strategy&quot;, coppaStudyDiseaseStrategy);


var coppaStudyOverallStatusStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaStudyOverallStatusStrategy.setServiceUrl(globalMap.get(&quot;STUDY_OVERALL_STATUS.url&quot;));
coppaStudyOverallStatusStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.pa.studyoverallstatusservice.client.StudyOverallStatusServiceClient&quot;);
coppaStudyOverallStatusStrategy.init();
globalMap.put(&quot;STUDY_OVERALL_STATUS_Strategy&quot;, coppaStudyOverallStatusStrategy);


//var coppaStudyParticipationContactStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
//coppaStudyParticipationContactStrategy.setServiceUrl(globalMap.get(&quot;STUDY_PARTICIPATION_CONTACT.url&quot;));
//coppaStudyParticipationContactStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.entities.organization.client.OrganizationClient&quot;);
//coppaStudyParticipationContactStrategy.init();
//globalMap.put(&quot;STUDY_PARTICIPATION_CONTACT_Strategy&quot;, coppaStudyParticipationContactStrategy);


var coppaStudySiteContactStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaStudySiteContactStrategy.setServiceUrl(globalMap.get(&quot;STUDY_SITE_CONTACT.url&quot;));
coppaStudySiteContactStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.pa.studysitecontactservice.client.StudySiteContactServiceClient&quot;);
coppaStudySiteContactStrategy.init();
globalMap.put(&quot;STUDY_SITE_CONTACT_Strategy&quot;, coppaStudySiteContactStrategy);


var coppaStudyRelationshipStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaStudyRelationshipStrategy.setServiceUrl(globalMap.get(&quot;STUDY_RELATIONSHIP.url&quot;));
coppaStudyRelationshipStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.pa.studyrelationshipservice.client.StudyRelationshipServiceClient&quot;);
coppaStudyRelationshipStrategy.init();
globalMap.put(&quot;STUDY_RELATIONSHIP_Strategy&quot;, coppaStudyRelationshipStrategy);


var coppaStudyResourcingStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaStudyResourcingStrategy.setServiceUrl(globalMap.get(&quot;STUDY_RESOURCING.url&quot;));
coppaStudyResourcingStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.pa.studyresourcingservice.client.StudyResourcingServiceClient&quot;);
coppaStudyResourcingStrategy.init();
globalMap.put(&quot;STUDY_RESOURCING_Strategy&quot;, coppaStudyResourcingStrategy);


var coppaStudyIndIdeStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaStudyIndIdeStrategy.setServiceUrl(globalMap.get(&quot;STUDY_IND_IDE.url&quot;));
coppaStudyIndIdeStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.pa.studyindideservice.client.StudyIndIdeServiceClient&quot;);
coppaStudyIndIdeStrategy.init();
globalMap.put(&quot;STUDY_IND_IDE_Strategy&quot;, coppaStudyIndIdeStrategy);


var coppaStudyOnholdStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaStudyOnholdStrategy.setServiceUrl(globalMap.get(&quot;STUDY_ONHOLD.url&quot;));
coppaStudyOnholdStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.pa.studyonholdservice.client.StudyOnholdServiceClient&quot;);
coppaStudyOnholdStrategy.init();
globalMap.put(&quot;STUDY_ONHOLD_Strategy&quot;, coppaStudyOnholdStrategy);


var coppaStudyOutcomeMeasureStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaStudyOutcomeMeasureStrategy.setServiceUrl(globalMap.get(&quot;STUDY_OUTCOME_MEASURE.url&quot;));
coppaStudyOutcomeMeasureStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.pa.studyoutcomemeasureservice.client.StudyOutcomeMeasureServiceClient&quot;);
coppaStudyOutcomeMeasureStrategy.init();
globalMap.put(&quot;STUDY_OUTCOME_MEASURE_Strategy&quot;, coppaStudyOutcomeMeasureStrategy);


var coppaStudyRecruitmentStatusStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaStudyRecruitmentStatusStrategy.setServiceUrl(globalMap.get(&quot;STUDY_RECRUITMENT_STATUS.url&quot;));
coppaStudyRecruitmentStatusStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.pa.studyrecruitmentstatusservice.client.StudyRecruitmentStatusServiceClient&quot;);
coppaStudyRecruitmentStatusStrategy.init();
globalMap.put(&quot;STUDY_RECRUITMENT_STATUS_Strategy&quot;, coppaStudyRecruitmentStatusStrategy);


var coppaStudyRegulatoryAuthorityStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaStudyRegulatoryAuthorityStrategy.setServiceUrl(globalMap.get(&quot;STUDY_REGULATORY_AUTHORITY.url&quot;));
coppaStudyRegulatoryAuthorityStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.pa.studyregulatoryauthorityservice.client.StudyRegulatoryAuthorityServiceClient&quot;);
coppaStudyRegulatoryAuthorityStrategy.init();
globalMap.put(&quot;STUDY_REGULATORY_AUTHORITY_Strategy&quot;, coppaStudyRegulatoryAuthorityStrategy);


var coppaStudySiteAccrualStatusStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaStudySiteAccrualStatusStrategy.setServiceUrl(globalMap.get(&quot;STUDY_SITE_ACCRUAL_STATUS.url&quot;));
coppaStudySiteAccrualStatusStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.pa.studysiteaccrualstatusservice.client.StudySiteAccrualStatusServiceClient&quot;);
coppaStudySiteAccrualStatusStrategy.init();
globalMap.put(&quot;STUDY_SITE_ACCRUAL_STATUS_Strategy&quot;, coppaStudySiteAccrualStatusStrategy);


var coppaDocumentStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaDocumentStrategy.setServiceUrl(globalMap.get(&quot;DOCUMENT.url&quot;));
coppaDocumentStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.pa.documentservice.client.DocumentServiceClient&quot;);
coppaDocumentStrategy.init();
globalMap.put(&quot;DOCUMENT_Strategy&quot;, coppaDocumentStrategy);


var coppaDocumentWorkflowStatusStrategy = new Packages.gov.nih.nci.ihub.writer.ncies.core.CoppaInvocationStrategy();
coppaDocumentWorkflowStatusStrategy.setServiceUrl(globalMap.get(&quot;DOCUMENT_WORKFLOW_STATUS.url&quot;));
coppaDocumentWorkflowStatusStrategy.setGridClientClassName(&quot;gov.nih.nci.coppa.services.pa.documentworkflowstatusservice.client.DocumentWorkflowStatusServiceClient&quot;);
coppaDocumentWorkflowStatusStrategy.init();
globalMap.put(&quot;DOCUMENT_WORKFLOW_STATUS_Strategy&quot;, coppaDocumentWorkflowStatusStrategy);


// This script executes once when the mule engine is started
// You only have access to the globalMap here to persist data
return;</deployScript>
  <shutdownScript>// This script executes once when the mule engine is stopped
// You only have access to the globalMap here to persist data
return;</shutdownScript>
</com.webreach.mirth.model.Channel>